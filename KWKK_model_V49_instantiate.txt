class KWKK_CCHP_V49.SimModels.KWKK_LOOP
  parameter Boolean Switch.CHP_ON = true;
  parameter Boolean Switch.AdCM_ON = false;
  parameter Boolean Switch.RevHP_HP_ON = false;
  parameter Boolean Switch.RevHP_CC_ON = true;
  parameter Boolean Switch.Coil_ON = false;
  Real Switch.AdCM_Switch;
  Real Switch.RevHP_HP_Switch;
  Real Switch.RevHP_CC_Switch;
  Real Switch.CHP_Switch;
  Real Switch.Coil_Switch;
  parameter Real CHP.Pth_CHP_Nominal(unit = "kW") = 10.2 "Nominal Thermal Power [kW]";
  parameter Real CHP.Pel_CHP_Nominal(unit = "kW") = 5.3 "Electrical Power ouput in [kW]";
  parameter Real CHP.CHP_eta_Thermal(unit = "1") = 0.59 "Thermal efficiency";
  parameter Real CHP.CHP_eta_Electrical(unit = "1") = 0.3 "Electrical efficiency";
  parameter Real CHP.CHP_Fuel_HHV(unit = "kWh/kg") = 12.66 "Energy Fuel [kW.h/kg]";
  parameter Real CHP.Lower_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 50.0 "Lower temp limit below which CHP goes ON, Temperature corresponding to layer at top of tank selected by user in Tank Model";
  parameter Real CHP.Higher_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 50.0 "Upper temp limit above which CHP goes OFF, Temperature corresponding to layer at bottom of tank selected by user in Tank Model";
  constant Real CHP.rho_water(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3], use data sheet";
  constant Real CHP.rho_fuel(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 853.5 "Fuel density [kg/m3]";
  constant Real CHP.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water [kJ/(kg.K)]";
  Boolean CHP.heat "Boolean Parameter to introduce Hysteresis";
  Real CHP.CHP_H_W_MF_M(quantity = "MassFlowRate", unit = "kg/s") "Water mass flow out of the CHP [kg/s]";
  Real CHP.CHP_H_W_MF_M_Set(quantity = "MassFlowRate", unit = "kg/s");
  Real CHP.CHP_H_W_PT_M(unit = "kW") "Real thermal power produced by CHP [kW]";
  Real CHP.CHP_H_W_PE_M(unit = "kW") "Real electrical power produced by CHP [kW]";
  Real CHP.Pth_CHP(unit = "kW") "Power Calculation Variable [kW]";
  Real CHP.CHP_H_F_VF_M(unit = "l/h") "Fuel consumption of the CHP [l/h]";
  Real CHP.CHP_H_W_VF_M(unit = "m3/h") "Water volume Flow Rate [m3/h]";
  Real CHP.CHP_H_W_T_M_FL(quantity = "ThermodynamicTemperature", unit = "degC") "Water temperature at the exit of CHP in [°C]";
  Real CHP.CHP_H_W_T_M_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature of the return water to the CHP[°C]";
  Real CHP.CHP_H_W_T_M_FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Water temperature at the exit of CHP in [K]";
  Real CHP.CHP_H_W_T_M_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Temperature of the return water to the CHP[K]";
  Real CHP.CHP_ON_int(unit = "1") "for internal control logic";
  Real CHP.PartLoad_Ratio(unit = "1") "Part Load ratio for Thermal part load operation of CHP";
  Real CHP.Temp_Low(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature corresponding to layer selected by user in Tank Model. This is at top of tank";
  Real CHP.Temp_High(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature corresponding to layer selected by user in Tank Model. This is at bottom of tank";
  Real CHP.CHP_HTES_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CHP.CHP_HTES_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real CHP.CHP_HTES_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CHP.CHP_ON;
  Real CHP.DobleTempIn.T1(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CHP.DobleTempIn.T2(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real Load.Pth_CC(unit = "kW") = 2.0 "Thermal Power of the LOAD";
  parameter Real Load.T_CC_FL(quantity = "ThermodynamicTemperature", unit = "degC") = 35.0 " Temeprature going to Climate Chamber";
  parameter Real Load.v_dot_CC(unit = "m3/h") = 1.0 "Volume Flow going to the Climate Chamber [m3/h]";
  constant Real Load.rho_water(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3]";
  constant Real Load.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water";
  Real Load.LOAD_HC_W_T_M__FL_(quantity = "ThermodynamicTemperature", unit = "degC") "Temp from tank to 3-MV";
  Real Load.LOAD_HC_W_T_M__RL_(quantity = "ThermodynamicTemperature", unit = "degC") "Temp from 3-MV back to Tank, is the same as temp. coming back from climate chamber = T_CC_RL";
  Real Load.T_CC_RL(quantity = "ThermodynamicTemperature", unit = "degC");
  Real Load.LOAD_HC_W_T_M__FL__K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real Load.T_CC_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real Load.m_dot_LOAD(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow going to the LOAD [kg/s]";
  Real Load.m_dot_CC(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow going to the Climate Chamber[kg/s]";
  Real Load.LOAD_HC_W_VF_M___(unit = "m3/h") "Volume Flow going to the LOAD [m3/h]";
  Real Load.LOAD_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real Load.LOAD_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real Load.LOAD_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  parameter Real HX_3_Small.A(quantity = "Area", unit = "m2") = 0.52 "Heat exchange surface area [m2]";
  parameter Real HX_3_Small.U(unit = "kW/(K.m2)") = 2.22 "Overall heat transfer coefficient [kW/m2.°C]";
  constant Real HX_3_Small.cph(unit = "kJ/(kg.K)") = 4.16991 "Specific heat coefficient of water [kJ/kg.K]";
  constant Real HX_3_Small.cpc(unit = "kJ/(kg.K)") = 3.66736 "Specific heat coefficient of Ethylene glycol 34% [kJ/kg.K]";
  Real HX_3_Small.T_h_in(quantity = "ThermodynamicTemperature", unit = "degC") "Inlet Temperature of hot fluid [°C]";
  Real HX_3_Small.T_h_out(quantity = "ThermodynamicTemperature", unit = "degC") "Outlet Temperature of hot fluid [°C]";
  Real HX_3_Small.T_c_in(quantity = "ThermodynamicTemperature", unit = "degC") "Inlet Temperature of cold fluid [°C]";
  Real HX_3_Small.T_c_out(quantity = "ThermodynamicTemperature", unit = "degC") "Outlet Temperature of cold fluid [°C]";
  Real HX_3_Small.Cmax(unit = "kW/K") "Maximum heat capacity rate [kW/K]";
  Real HX_3_Small.Cmin(unit = "kW/K") "Minimum heat capacity rate [kW/K]";
  Real HX_3_Small.Chot(unit = "kW/K") "Heat capacity rate of the hot fluid [kW/K]";
  Real HX_3_Small.Ccold(unit = "kW/K") "Heat capacity rate of the cold fluid [kW/K]";
  Real HX_3_Small.Cr(unit = "kW/K") "Heat capacity ratio  ";
  Real HX_3_Small.qmax(quantity = "Power", unit = "W") "Maximum heat that could be transferred between the fluids per unit time [kW]";
  Real HX_3_Small.q(quantity = "Power", unit = "W") "Heat transfer between the fluid [kW]";
  Real HX_3_Small.NTU(unit = "1") "Number of Transfer Units (NTU)";
  Real HX_3_Small.eff(unit = "1") "Effectiveness";
  Real HX_3_Small.m_dot_c_in(quantity = "MassFlowRate", unit = "kg/s") "Outlet mass flow of cold fluid [kg/s]";
  Real HX_3_Small.m_dot_h_in(quantity = "MassFlowRate", unit = "kg/s") "Inlet mass flow of hot fluid [kg/s]";
  Real HX_3_Small.T_h_in_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_3_Small.T_h_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_3_Small.T_c_in_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_3_Small.T_c_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_3_Small.HX_OC_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_3_Small.HX_OC_in.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HX_3_Small.HX_OC_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_3_Small.HX_AdCM_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_3_Small.HX_AdCM_in.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HX_3_Small.HX_AdCM_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real AdCM.v_dot_AdCM_LT_set(unit = "m3/h") = 1.7 "Volume Flow in the LT Circuit going to the CTES [m3/h]";
  parameter Real AdCM.v_dot_AdCM_MT_set(unit = "m3/h") = 4.2 "Volume Flow in the MT Circuit going to the OC [m3/h]";
  parameter Real AdCM.v_dot_AdCM_HT_set(unit = "m3/h") = 1.3 "Volume Flow in the HT Circuit going to the HTES [m3/h]";
  parameter Real AdCM.SF = 0.0 "Smoothing factor for Cyclic Thermal Power Curves";
  parameter Real AdCM.Lower_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 12.0 "Lower temp limit below which AdCM goes OFF, Temperature corresponding to layer at bottom of tank selected by user in Tank Model";
  parameter Real AdCM.Higher_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 15.0 "Upper temp limit above which AdCM goes ON, Temperature corresponding to layer at top of tank selected by user in Tank Model";
  constant Real AdCM.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water [kJ/(kg.K)]";
  constant Real AdCM.rho_water(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3], use data sheet!!!";
  Boolean AdCM.cool "Boolean Parameter to introduce Hysteresis";
  Real AdCM.ADCM_C_W_T_M_LT_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Low Temperature Circuit - Chilled Water coming back from CTES[°C]";
  Real AdCM.ADCM_C_W_T_M_MT_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Medium Temperature Circuit - Cooling Water Coming Back from OC[°C]";
  Real AdCM.ADCM_C_W_T_M_HT_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Driving Heat Temperature coming from the HTES [C]";
  Real AdCM.ADCM_C_W_T_M_LT_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Low Temperature coming from the CTES [K]";
  Real AdCM.ADCM_C_W_T_M_HT_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Hot Temperature coming from the HTES [K]";
  Real AdCM.ADCM_C_W_T_M_MT_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Medium Temperature Circuit - Cooling Water[K]";
  Real AdCM.ADCM_C_W_T_M_MT_FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Medium Temperature Circuit going to the Outdoor Coil [K]";
  Real AdCM.ADCM_C_W_T_M_HT_FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "High Temperature Circuit - Hot Water[K]";
  Real AdCM.ADCM_C_W_T_M_LT_FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0) "Low Temperature Circuit - Chilled Water[K]";
  Real AdCM.ADCM_C_W_T_M_MT_FL(quantity = "ThermodynamicTemperature", unit = "degC") "Medium Temperature Circuit Temperature going to the Outdoor Coil [C]";
  Real AdCM.ADCM_C_W_T_M_LT_FL(quantity = "ThermodynamicTemperature", unit = "degC") "Low Temperature Circuit - going to the CTES [C]";
  Real AdCM.ADCM_C_W_T_M_HT_FL(quantity = "ThermodynamicTemperature", unit = "degC") "High Temperature Circuit - Hot Water going to HTES[°C]";
  Real AdCM.COP(unit = "1") "Coeficient of Performance";
  Real AdCM.ADCM_C_W_PT_M_LT_(unit = "kW") "Cooling Capacity [KW]";
  Real AdCM.m_dot_AdCM_HT(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow Rate that goes to the HTES [kg/s]";
  Real AdCM.m_dot_AdCM_LT(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow Rate that goes to the CTES [kg/s]";
  Real AdCM.m_dot_AdCM_MT(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow Rate that goes to the OC [kg/s]";
  Real AdCM.m_dot_AdCM_HT_Set(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow Rate that goes to the HTES [kg/s]";
  Real AdCM.m_dot_AdCM_LT_Set(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow Rate that goes to the CTES [kg/s]";
  Real AdCM.m_dot_AdCM_MT_Set(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow Rate that goes to the OC [kg/s]";
  Real AdCM.ADCM_C_W_PT_M_HT_(unit = "kW") "Power Thermal in HT circuit [kW]";
  Real AdCM.ADCM_C_W_PT_M_MT_(unit = "kW") "Power Thermal in MT circuit [kW]";
  Real AdCM.ADCM_C_W_VF_M_LT_(unit = "m3/h");
  Real AdCM.ADCM_C_W_VF_M_MT_(unit = "m3/h");
  Real AdCM.ADCM_C_W_VF_M_HT_(unit = "m3/h");
  Real AdCM.AdCM_ON_int(unit = "1") "for control logic";
  Real AdCM.Temp_Low(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.Temp_High(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_CTES_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_CTES_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real AdCM.AdCM_HX_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_CTES_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_HTES_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_HTES_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real AdCM.AdCM_HTES_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_HX_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.AdCM_HX_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real AdCM.AdCM_ON;
  Real AdCM.DobleT_In_CTES.T1(quantity = "ThermodynamicTemperature", unit = "degC");
  Real AdCM.DobleT_In_CTES.T2(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real HX_1_Big.A(quantity = "Area", unit = "m2") = 7.83 "Heat exchange surface area [m2]";
  parameter Real HX_1_Big.U(unit = "kW/(K.m2)") = 2.151 "Overall heat transfer coefficient [kW/m2.°C]";
  constant Real HX_1_Big.cph(unit = "kJ/(kg.K)") = 4.16991 "Specific heat coefficient of water [kJ/kg.K]";
  constant Real HX_1_Big.cpc(unit = "kJ/(kg.K)") = 3.66736 "Specific heat coefficient of Ethylene glycol 34% [kJ/kg.K]";
  Real HX_1_Big.T_h_in(quantity = "ThermodynamicTemperature", unit = "degC") "Inlet Temperature of hot fluid [°C]";
  Real HX_1_Big.T_h_out(quantity = "ThermodynamicTemperature", unit = "degC") "Outlet Temperature of hot fluid [°C]";
  Real HX_1_Big.T_c_in(quantity = "ThermodynamicTemperature", unit = "degC") "Inlet Temperature of cold fluid [°C]";
  Real HX_1_Big.T_c_out(quantity = "ThermodynamicTemperature", unit = "degC") "Outlet Temperature of cold fluid [°C]";
  Real HX_1_Big.Cmax(unit = "kW/K") "Maximum heat capacity rate [kW/K]";
  Real HX_1_Big.Cmin(unit = "kW/K") "Minimum heat capacity rate [kW/K]";
  Real HX_1_Big.Chot(unit = "kW/K") "Heat capacity rate of the hot fluid [kW/K]";
  Real HX_1_Big.Ccold(unit = "kW/K") "Heat capacity rate of the cold fluid [kW/K]";
  Real HX_1_Big.Cr(unit = "kW/K") "Heat capacity ratio  ";
  Real HX_1_Big.qmax(quantity = "Power", unit = "W") "Maximum heat that could be transferred between the fluids per unit time [kW]";
  Real HX_1_Big.q(quantity = "Power", unit = "W") "Heat transfer between the fluid [kW]";
  Real HX_1_Big.NTU(unit = "1") "Number of Transfer Units (NTU)";
  Real HX_1_Big.eff(unit = "1") "Effectiveness";
  Real HX_1_Big.m_dot_c_in(quantity = "MassFlowRate", unit = "kg/s") "Outlet mass flow of cold fluid [kg/s]";
  Real HX_1_Big.m_dot_h_in(quantity = "MassFlowRate", unit = "kg/s") "Inlet mass flow of hot fluid [kg/s]";
  Real HX_1_Big.T_h_in_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_1_Big.T_h_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_1_Big.T_c_in_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_1_Big.T_c_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_1_Big.HX_OC_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_1_Big.HX_OC_in.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HX_1_Big.HX_OC_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_1_Big.HX_AdCM_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_1_Big.HX_AdCM_in.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HX_1_Big.HX_AdCM_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real RevHP_HP.v_dot_HT_FL_set(unit = "m3/h") = 2.79 "Volume Flow Rate from the RevHP to the Hot Storage Tank [m3/h]";
  parameter Real RevHP_HP.v_dot_MT_FL_set(unit = "m3/h") = 2.45 "Volume Flow Rate from the RevHP to the Outdoor Coil [m3/h]";
  parameter Real RevHP_HP.Lower_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 40.0 "Lower temp limit below which RevHP goes ON, Temperature corresponding to layer at top of tank selected by user in Tank Model";
  parameter Real RevHP_HP.Higher_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 45.0 "Upper temp limit above which RevHP goes OFF, Temperature corresponding to layer at bottom of tank selected by user in Tank Model";
  constant Real RevHP_HP.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat treansfer coefficient of water [kJ/(kg.K)]";
  constant Real RevHP_HP.rho_water(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3]";
  Boolean RevHP_HP.heat "Boolean Parameter to introduce Hysteresis";
  Real RevHP_HP.RevHP_HC_W_T_M_MT_FL_(quantity = "ThermodynamicTemperature", unit = "degC") "LWC Temp. going to HTES";
  Real RevHP_HP.RevHP_HC_W_T_M_LT_FL_(quantity = "ThermodynamicTemperature", unit = "degC") "LWE Temp. going to OC";
  Real RevHP_HP.RevHP_HC_W_T_M_MT_RL_(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.RevHP_HC_W_T_M_LT_RL_(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.Temp_Low(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature corresponding to layer selected by user in Tank Model. This is at top of tank";
  Real RevHP_HP.Temp_High(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature corresponding to layer selected by user in Tank Model. This is at bottom of tank";
  Real RevHP_HP.RevHP_HC_W_T_M_MT_FL__K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_HP.RevHP_HC_W_T_M_LT_FL__K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_HP.RevHP_HC_W_T_M_MT_RL__K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_HP.RevHP_HC_W_T_M_LT_RL__K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_HP.m_dot_HT_FL(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_HP.m_dot_MT_FL(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_HP.m_dot_HT_FL_Set(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_HP.m_dot_MT_FL_Set(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_HP.RevHP_HC_W_PT_M_MT__(unit = "kW");
  Real RevHP_HP.RevHP_HC_W_PT_M_LT__(unit = "kW");
  Real RevHP_HP.RevHP_HC_E_PE_M___(unit = "kW");
  Real RevHP_HP.RevHP_HC_W_VF_M_MT__(unit = "m3/h");
  Real RevHP_HP.RevHP_HC_W_VF_M_LT__(unit = "m3/h");
  Real RevHP_HP.RevHP_HP_ON_int(unit = "1") "for control logic";
  Real RevHP_HP.RevHP_HX_HT_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.RevHP_HX_HT_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_HP.RevHP_HX_MT_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.RevHP_HX_HT_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.RevHP_HX_MT_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.RevHP_HX_MT_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_HP.RevHP_HP_ON;
  Real RevHP_HP.DobleTempIn.T1(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.DobleTempIn.T2(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_HP.V_HT;
  parameter Real HX_2_Big.A(quantity = "Area", unit = "m2") = 7.83 "Heat exchange surface area [m2]";
  parameter Real HX_2_Big.U(unit = "kW/(K.m2)") = 2.151 "Overall heat transfer coefficient [kW/m2.°C]";
  constant Real HX_2_Big.cph(unit = "kJ/(kg.K)") = 4.16991 "Specific heat coefficient of water [kJ/kg.K]";
  constant Real HX_2_Big.cpc(unit = "kJ/(kg.K)") = 3.66736 "Specific heat coefficient of Ethylene glycol 34% [kJ/kg.K]";
  Real HX_2_Big.T_h_in(quantity = "ThermodynamicTemperature", unit = "degC") "Inlet Temperature of hot fluid [°C]";
  Real HX_2_Big.T_h_out(quantity = "ThermodynamicTemperature", unit = "degC") "Outlet Temperature of hot fluid [°C]";
  Real HX_2_Big.T_c_in(quantity = "ThermodynamicTemperature", unit = "degC") "Inlet Temperature of cold fluid [°C]";
  Real HX_2_Big.T_c_out(quantity = "ThermodynamicTemperature", unit = "degC") "Outlet Temperature of cold fluid [°C]";
  Real HX_2_Big.Cmax(unit = "kW/K") "Maximum heat capacity rate [kW/K]";
  Real HX_2_Big.Cmin(unit = "kW/K") "Minimum heat capacity rate [kW/K]";
  Real HX_2_Big.Chot(unit = "kW/K") "Heat capacity rate of the hot fluid [kW/K]";
  Real HX_2_Big.Ccold(unit = "kW/K") "Heat capacity rate of the cold fluid [kW/K]";
  Real HX_2_Big.Cr(unit = "kW/K") "Heat capacity ratio  ";
  Real HX_2_Big.qmax(quantity = "Power", unit = "W") "Maximum heat that could be transferred between the fluids per unit time [kW]";
  Real HX_2_Big.q(quantity = "Power", unit = "W") "Heat transfer between the fluid [kW]";
  Real HX_2_Big.NTU(unit = "1") "Number of Transfer Units (NTU)";
  Real HX_2_Big.eff(unit = "1") "Effectiveness";
  Real HX_2_Big.m_dot_c_in(quantity = "MassFlowRate", unit = "kg/s") "Outlet mass flow of cold fluid [kg/s]";
  Real HX_2_Big.m_dot_h_in(quantity = "MassFlowRate", unit = "kg/s") "Inlet mass flow of hot fluid [kg/s]";
  Real HX_2_Big.T_h_in_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_2_Big.T_h_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_2_Big.T_c_in_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_2_Big.T_c_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HX_2_Big.HX_OC_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_2_Big.HX_OC_in.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HX_2_Big.HX_OC_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_2_Big.HX_AdCM_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HX_2_Big.HX_AdCM_in.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HX_2_Big.HX_AdCM_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real RevHP_CC.v_dot_LT_FL_set(unit = "m3/h") = 2.45 "Volume Flow Rate from the RevHP to the Cold Storage Tank in evaporator circuit[m3/h]";
  parameter Real RevHP_CC.v_dot_MT_FL_set(unit = "m3/h") = 2.62 "Volume Flow Rate from the RevHP to the Outdoor Coil in condenser circuit [m3/h]";
  parameter Real RevHP_CC.Lower_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 10.0 "Lower temp limit below which RevHP_CCM goes OFF, Temperature corresponding to layer at bottom of tank selected by user in Tank Model";
  parameter Real RevHP_CC.Higher_Temp_Limit(quantity = "ThermodynamicTemperature", unit = "degC") = 15.0 "Upper temp limit above which RevHP_CCM goes ON, Temperature corresponding to layer at top of tank selected by user in Tank Model";
  constant Real RevHP_CC.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water [kJ/(kg.K)]";
  constant Real RevHP_CC.rho_water(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3]";
  Boolean RevHP_CC.cool "Boolean Parameter to introduce Hysteresis";
  Real RevHP_CC.RevHP_HC_W_T_M_LT_FL(quantity = "ThermodynamicTemperature", unit = "degC") "LWE: Temp. going to CTES";
  Real RevHP_CC.RevHP_HC_W_T_M_MT_FL(quantity = "ThermodynamicTemperature", unit = "degC") "LWC: Temp. going to OC";
  Real RevHP_CC.RevHP_HC_W_T_M_LT_RL(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.RevHP_HC_W_T_M_MT_RL(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.Temp_Low(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.Temp_High(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.RevHP_HC_W_T_M_LT_FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_CC.RevHP_HC_W_T_M_MT_FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_CC.RevHP_HC_W_T_M_LT_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_CC.RevHP_HC_W_T_M_MT_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real RevHP_CC.m_dot_LT_FL(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_CC.m_dot_MT_FL(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_CC.m_dot_LT_FL_Set(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_CC.m_dot_MT_FL_Set(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_CC.RevHP_HC_W_PT_M_LT__(unit = "kW");
  Real RevHP_CC.RevHP_HC_W_PT_M_MT__(unit = "kW");
  Real RevHP_CC.RevHP_HC_E_PE_M___(unit = "kW");
  Real RevHP_CC.RevHP_CC_ON_int(unit = "1");
  Real RevHP_CC.RevHP_HC_W_VF_M_LT__(unit = "m3/h");
  Real RevHP_CC.RevHP_HC_W_VF_M_MT__(unit = "m3/h");
  Real RevHP_CC.RevHP_CTES_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.RevHP_CTES_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_CC.RevHP_CTES_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.RevHP_OC_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.RevHP_OC_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.RevHP_OC_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real RevHP_CC.RevHP_CC_ON;
  Real RevHP_CC.DoubleTempIn.T1(quantity = "ThermodynamicTemperature", unit = "degC");
  Real RevHP_CC.DoubleTempIn.T2(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real Load_C.Pth_CC(unit = "kW") = 2.0 "Thermal Power of the LOAD";
  parameter Real Load_C.T_CC_FL(quantity = "ThermodynamicTemperature", unit = "degC") = 16.0 " Temeprature going to Climate Chamber";
  parameter Real Load_C.v_dot_CC(unit = "m3/h") = 1.0 "Volume Flow going to the Climate Chamber [m3/h]";
  constant Real Load_C.rho_water(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3]";
  constant Real Load_C.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water";
  Real Load_C.LOAD_HC_W_T_M__FL_(quantity = "ThermodynamicTemperature", unit = "degC") "Temp from tank to 3-MV";
  Real Load_C.LOAD_HC_W_T_M__RL_(quantity = "ThermodynamicTemperature", unit = "degC") "Temp from 3-MV back to Tank, is the same as temp. coming back from climate chamber = T_CC_RL";
  Real Load_C.T_CC_RL(quantity = "ThermodynamicTemperature", unit = "degC");
  Real Load_C.LOAD_HC_W_T_M__FL__K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real Load_C.T_CC_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real Load_C.m_dot_LOAD(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow going to the LOAD [kg/s]";
  Real Load_C.m_dot_CC(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow going to the Climate Chamber[kg/s]";
  Real Load_C.LOAD_HC_W_VF_M___(unit = "m3/h") "Volume Flow going to the LOAD [m3/h]";
  Real Load_C.LOAD_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real Load_C.LOAD_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real Load_C.LOAD_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  parameter Real Ambient.T_amb(quantity = "ThermodynamicTemperature", unit = "degC") = 22.0;
  Real Ambient.Amb_Temp.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real HTES_Loop.T_ini_set(quantity = "ThermodynamicTemperature", unit = "degC") = 50.0 "Initial temperature of the tank [°C], Should always be higher than T_AdCM_RL/T_Load_RL and lower then heat hysteresis loop";
  parameter Real HTES_Loop.D(quantity = "Length", unit = "m") = 1.0 " Outer Diameter of the tank [m]";
  parameter Real HTES_Loop.h(quantity = "Length", unit = "m") = 2.196 "Height of the tank [m]";
  parameter Real HTES_Loop.t(quantity = "Length", unit = "m") = 0.0125 "Thickness of walls [m]";
  parameter Real HTES_Loop.kappa(unit = "kW/(K.m2)") = 0.002 "Heat transfer coefficient of storage walls[kW/(m2.K)], depends on tank and insulation material";
  parameter Real HTES_Loop.lambda_eff(unit = "kW/(m.K)") = 0.0015 "Effective vertical heat conductivity considering thermal conduction and convection [kW/(m.K)], Eicker Book/Paper";
  parameter Real HTES_Loop.P_COIL_Set(unit = "kW") = 5.9 "Heating Power of COIL [kW]. Since addition of heat to layers in coil is almost linear then heating power is added to each layer above the layers in which COIL is located. For reason see test results";
  parameter Integer HTES_Loop.n = 90 "Number of Layers in Tank";
  parameter Real HTES_Loop.v_dot_RevHP_HT_Set(unit = "m3/h") = 1.1 "Volumetric flow in the HT circuit that flows in the HX [m3/h]";
  Boolean HTES_Loop.heat "Boolean Parameter to introduce Hysteresis";
  parameter Integer HTES_Loop.Coil_Safety_Layer = 30 "Define layer whose temperature decides COIL Safety";
  parameter Integer HTES_Loop.Load_FL_Layer = 60 "Define layer from which water goes to LOAD";
  parameter Integer HTES_Loop.AdCM_FL_Layer = 80 "Define layer from which water goes to AdCM";
  parameter Integer HTES_Loop.CHP_Layer = 10 "Define Layer from which water goes to the CHP";
  parameter Integer HTES_Loop.HX_Layer = 10 "Define Layer from which water goes to the HX";
  parameter Integer HTES_Loop.Temp1 = 60 "Layer of the tank which controls the Hysteresis (Lower Temperature Limit)";
  parameter Integer HTES_Loop.Temp2 = 10 "Layer of the tank which controls the hysteresis (Higher Temperature Limit)";
  constant Real HTES_Loop.rho(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Density of water";
  constant Real HTES_Loop.cp(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water[kJ/kg.K]";
  constant Real HTES_Loop.pi = 3.14159265358979;
  Real HTES_Loop.HTES_H_W_T_M_IT[1](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[2](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[3](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[4](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[5](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[6](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[7](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[8](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[9](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[10](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[11](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[12](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[13](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[14](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[15](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[16](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[17](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[18](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[19](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[20](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[21](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[22](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[23](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[24](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[25](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[26](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[27](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[28](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[29](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[30](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[31](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[32](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[33](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[34](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[35](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[36](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[37](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[38](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[39](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[40](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[41](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[42](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[43](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[44](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[45](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[46](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[47](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[48](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[49](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[50](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[51](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[52](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[53](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[54](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[55](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[56](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[57](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[58](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[59](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[60](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[61](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[62](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[63](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[64](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[65](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[66](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[67](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[68](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[69](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[70](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[71](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[72](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[73](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[74](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[75](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[76](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[77](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[78](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[79](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[80](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[81](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[82](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[83](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[84](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[85](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[86](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[87](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[88](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[89](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.HTES_H_W_T_M_IT[90](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real HTES_Loop.T_HTES_CHP_In(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming from the CHP [°C]";
  Real HTES_Loop.T_HTES_RevHP_In(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming from the RevHP [°C]";
  Real HTES_Loop.T_HTES_LOAD_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming back from the LOAD [°C]";
  Real HTES_Loop.T_HTES_AdCM_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming back from the AdCM[°C]";
  Real HTES_Loop.T_ini[1](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[2](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[3](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[4](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[5](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[6](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[7](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[8](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[9](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[10](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[11](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[12](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[13](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[14](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[15](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[16](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[17](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[18](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[19](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[20](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[21](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[22](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[23](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[24](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[25](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[26](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[27](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[28](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[29](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[30](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[31](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[32](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[33](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[34](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[35](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[36](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[37](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[38](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[39](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[40](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[41](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[42](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[43](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[44](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[45](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[46](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[47](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[48](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[49](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[50](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[51](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[52](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[53](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[54](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[55](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[56](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[57](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[58](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[59](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[60](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[61](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[62](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[63](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[64](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[65](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[66](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[67](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[68](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[69](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[70](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[71](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[72](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[73](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[74](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[75](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[76](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[77](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[78](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[79](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[80](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[81](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[82](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[83](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[84](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[85](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[86](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[87](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[88](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[89](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.T_ini[90](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real HTES_Loop.HTES_H_W_T_M_IT_K[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[11](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[12](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[13](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[14](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[15](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[16](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[17](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[18](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[19](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[20](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[21](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[22](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[23](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[24](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[25](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[26](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[27](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[28](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[29](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[30](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[31](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[32](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[33](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[34](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[35](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[36](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[37](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[38](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[39](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[40](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[41](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[42](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[43](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[44](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[45](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[46](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[47](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[48](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[49](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[50](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[51](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[52](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[53](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[54](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[55](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[56](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[57](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[58](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[59](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[60](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[61](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[62](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[63](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[64](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[65](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[66](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[67](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[68](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[69](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[70](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[71](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[72](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[73](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[74](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[75](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[76](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[77](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[78](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[79](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[80](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[81](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[82](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[83](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[84](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[85](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[86](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[87](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[88](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[89](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.HTES_H_W_T_M_IT_K[90](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[11](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[12](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[13](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[14](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[15](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[16](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[17](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[18](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[19](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[20](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[21](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[22](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[23](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[24](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[25](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[26](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[27](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[28](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[29](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[30](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[31](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[32](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[33](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[34](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[35](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[36](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[37](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[38](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[39](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[40](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[41](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[42](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[43](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[44](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[45](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[46](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[47](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[48](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[49](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[50](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[51](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[52](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[53](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[54](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[55](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[56](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[57](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[58](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[59](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[60](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[61](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[62](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[63](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[64](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[65](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[66](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[67](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[68](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[69](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[70](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[71](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[72](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[73](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[74](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[75](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[76](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[77](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[78](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[79](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[80](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[81](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[82](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[83](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[84](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[85](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[86](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[87](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[88](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[89](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_ini_K[90](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_amb_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_HTES_CHP_In_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_HTES_RevHP_In_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_HTES_LOAD_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.T_HTES_AdCM_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real HTES_Loop.m_dot_CHP(quantity = "MassFlowRate", unit = "kg/s") "Mass flow coming from the CHP (Top Layer) [kg/s]";
  Real HTES_Loop.m_dot_RevHP_HT(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate in the RevHP_HT circuit (Top Layer) [kg/s]";
  Real HTES_Loop.m_dot_LOAD(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow in the LOAD Circuit[kg/s] WHICH LAYER??";
  Real HTES_Loop.m_dot_AdCM_HT(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow in the HT AdCM circuit[kg/s] WHICH LAYER??";
  Real HTES_Loop.v_dot_RevHP_HT(unit = "m3/h") "Volume Flow rate in the RevHP_HT circuit [m3/h] WHICH LAYER??";
  Real HTES_Loop.m_dot[1](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[2](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[3](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[4](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[5](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[6](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[7](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[8](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[9](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[10](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[11](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[12](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[13](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[14](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[15](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[16](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[17](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[18](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[19](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[20](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[21](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[22](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[23](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[24](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[25](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[26](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[27](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[28](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[29](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[30](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[31](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[32](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[33](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[34](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[35](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[36](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[37](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[38](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[39](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[40](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[41](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[42](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[43](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[44](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[45](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[46](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[47](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[48](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[49](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[50](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[51](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[52](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[53](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[54](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[55](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[56](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[57](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[58](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[59](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[60](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[61](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[62](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[63](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[64](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[65](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[66](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[67](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[68](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[69](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[70](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[71](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[72](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[73](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[74](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[75](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[76](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[77](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[78](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[79](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[80](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[81](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[82](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[83](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[84](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[85](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[86](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[87](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[88](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[89](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.m_dot[90](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real HTES_Loop.COIL_H_E_PT_M__(unit = "kW") "Power of coil [kW]";
  Real HTES_Loop.Alayer(quantity = "Area", unit = "m2") "Cross section of the respective layer in contact with above or below layer[m2]";
  Real HTES_Loop.Aamb(quantity = "Area", unit = "m2") "Cross Section of the respective layer in contact with tank surface and transfering heat to ambient [m2]";
  Real HTES_Loop.zi(quantity = "Length", unit = "m") "Height of each layer. Height of tank / Number of Layers zi=h/n";
  Real HTES_Loop.mi(quantity = "Mass", unit = "kg", min = 0.0) "Water mass in the control volume [kg]";
  Real HTES_Loop.di(quantity = "Length", unit = "m") "Internal diameter of tank";
  Real HTES_Loop.Coil_ON_int(unit = "1") "For internal control logic of COIL";
  Real HTES_Loop.d_pos(unit = "1");
  Real HTES_Loop.d_neg(unit = "1");
  Real HTES_Loop.HTES_CHP_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_CHP_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_CHP_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HTES_Loop.HTES_LOAD_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_LOAD_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_LOAD_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HTES_Loop.HTES_AdCM_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_AdCM_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HTES_Loop.HTES_AdCM_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_HX_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.HTES_HX_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real HTES_Loop.HTES_HX_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.v_HT;
  Real HTES_Loop.Coil_ON;
  Real HTES_Loop.T_amb.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.DobleTempOut.T1(quantity = "ThermodynamicTemperature", unit = "degC");
  Real HTES_Loop.DobleTempOut.T2(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real OC_1.v_dot_air_max(unit = "m3/h") = 18000.0 "Maximum volume flow of air [m3/h]";
  parameter Real OC_1.Volt_max(quantity = "ElectricPotential", unit = "V") = 10.0 "Max voltage signal input to the OC [V]";
  parameter Real OC_1.Volt_real(quantity = "ElectricPotential", unit = "V") = 10.0 "Max voltage signal input to the OC [V]";
  parameter Real OC_1.A(quantity = "Area", unit = "m2") = 221.4 "Heat exchange surface area [m2]";
  parameter Real OC_1.U(unit = "kW/(K.m2)") = 0.03749723032 "Overall heat transfer coefficient [kW/m2.°C]";
  parameter Real OC_1.v_dot_OC(unit = "m3/h") = 4.76 "Volume flow of Ethynele Glycol 34% that goes to the HX [m3/h]";
  parameter Real OC_1.RPM_max(unit = "RPM") = 900.0 "Max RPM of the fan";
  parameter Real OC_1.Pel_max(quantity = "Power", unit = "W") = 1.4 "Maximum electrical power consumption of OC";
  constant Real OC_1.rho_brine(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1039.7392 "Density of Ethylene Glycol 34% [kg/m3]";
  constant Real OC_1.rho_air(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1.225 "Air density [kg/m3]";
  constant Real OC_1.cp_air(unit = "kJ/(kg.K)") = 1.005 "Specific heat transfer coefficient of air [kJ/(kg.K)]";
  constant Real OC_1.cp_brine(unit = "kJ/(kg.K)") = 3.66736 "Specific heat transfer coefficient of Ethynele Glycol 34%[kJ/(kg.K)]";
  Real OC_1.OC_HC_B_T_M__FL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature that leaves the OC going to AdCM/Rev_HP [°C]";
  Real OC_1.OC_HC_B_T_M__RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature that enters the OC coming from the AdCM/Rev_HP [°C]";
  Real OC_1.T_air_out(quantity = "ThermodynamicTemperature", unit = "degC") "Air temperature at fan outlet[°C]";
  Real OC_1.OC_HC_B_T_M__FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_1.OC_HC_B_T_M__RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_1.T_air_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_1.m_dot_OC(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate of glycol-water mixture in the OC circuit [kg/s]";
  Real OC_1.m_dot_air(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate of air at fan inlet [kg/s]";
  Real OC_1.Chot(unit = "kW/K") "Heat capacity rate of the hot fluid[kW/K] [kW/K]";
  Real OC_1.Ccold(unit = "kW/K") "Heat capacity rate of the cold fluid[kW/K] [kW/K]";
  Real OC_1.Cmax(unit = "kW/K") "Maximum heat capacity rate [kW/K]";
  Real OC_1.Cmin(unit = "kW/K") "Minimum heat capacity rate [kW/K]";
  Real OC_1.Cr(unit = "kW/K") "Heat capacity ratio";
  Real OC_1.qmax(quantity = "Power", unit = "W") "Maximum heat that could be transferred between the fluids per unit time [kW]";
  Real OC_1.q(quantity = "Power", unit = "W") "Real heat transfer between the fluids [kW]";
  Real OC_1.NTU(unit = "1") "Number of Transfer Units (NTU)";
  Real OC_1.eff(unit = "1") "Effectiveness";
  Real OC_1.RPM_real(unit = "RPM") "Real RPM of the fan";
  Real OC_1.OC_HC_E_PE_M(quantity = "Power", unit = "W") "Real electrical power consumption of OC";
  Real OC_1.v_dot_air_real(unit = "m3/h") "Real air volume flow [m3/h]";
  Real OC_1.OC_HX_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real OC_1.OC_HX_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real OC_1.OC_HX_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real OC_1.T_amb.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real OC_2.v_dot_air_max(unit = "m3/h") = 18000.0 "Maximum volume flow of air [m3/h]";
  parameter Real OC_2.Volt_max(quantity = "ElectricPotential", unit = "V") = 10.0 "Max voltage signal input to the OC [V]";
  parameter Real OC_2.Volt_real(quantity = "ElectricPotential", unit = "V") = 10.0 "Max voltage signal input to the OC [V]";
  parameter Real OC_2.A(quantity = "Area", unit = "m2") = 221.4 "Heat exchange surface area [m2]";
  parameter Real OC_2.U(unit = "kW/(K.m2)") = 0.03749723032 "Overall heat transfer coefficient [kW/m2.°C]";
  parameter Real OC_2.v_dot_OC(unit = "m3/h") = 4.76 "Volume flow of Ethynele Glycol 34% that goes to the HX [m3/h]";
  parameter Real OC_2.RPM_max(unit = "RPM") = 900.0 "Max RPM of the fan";
  parameter Real OC_2.Pel_max(quantity = "Power", unit = "W") = 1.4 "Maximum electrical power consumption of OC";
  constant Real OC_2.rho_brine(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1039.7392 "Density of Ethylene Glycol 34% [kg/m3]";
  constant Real OC_2.rho_air(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1.225 "Air density [kg/m3]";
  constant Real OC_2.cp_air(unit = "kJ/(kg.K)") = 1.005 "Specific heat transfer coefficient of air [kJ/(kg.K)]";
  constant Real OC_2.cp_brine(unit = "kJ/(kg.K)") = 3.66736 "Specific heat transfer coefficient of Ethynele Glycol 34%[kJ/(kg.K)]";
  Real OC_2.OC_HC_B_T_M__FL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature that leaves the OC going to AdCM/Rev_HP [°C]";
  Real OC_2.OC_HC_B_T_M__RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature that enters the OC coming from the AdCM/Rev_HP [°C]";
  Real OC_2.T_air_out(quantity = "ThermodynamicTemperature", unit = "degC") "Air temperature at fan outlet[°C]";
  Real OC_2.OC_HC_B_T_M__FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_2.OC_HC_B_T_M__RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_2.T_air_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_2.m_dot_OC(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate of glycol-water mixture in the OC circuit [kg/s]";
  Real OC_2.m_dot_air(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate of air at fan inlet [kg/s]";
  Real OC_2.Chot(unit = "kW/K") "Heat capacity rate of the hot fluid[kW/K] [kW/K]";
  Real OC_2.Ccold(unit = "kW/K") "Heat capacity rate of the cold fluid[kW/K] [kW/K]";
  Real OC_2.Cmax(unit = "kW/K") "Maximum heat capacity rate [kW/K]";
  Real OC_2.Cmin(unit = "kW/K") "Minimum heat capacity rate [kW/K]";
  Real OC_2.Cr(unit = "kW/K") "Heat capacity ratio";
  Real OC_2.qmax(quantity = "Power", unit = "W") "Maximum heat that could be transferred between the fluids per unit time [kW]";
  Real OC_2.q(quantity = "Power", unit = "W") "Real heat transfer between the fluids [kW]";
  Real OC_2.NTU(unit = "1") "Number of Transfer Units (NTU)";
  Real OC_2.eff(unit = "1") "Effectiveness";
  Real OC_2.RPM_real(unit = "RPM") "Real RPM of the fan";
  Real OC_2.OC_HC_E_PE_M(quantity = "Power", unit = "W") "Real electrical power consumption of OC";
  Real OC_2.v_dot_air_real(unit = "m3/h") "Real air volume flow [m3/h]";
  Real OC_2.OC_HX_in.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real OC_2.OC_HX_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real OC_2.OC_HX_Out.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real OC_2.T_amb.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real OC_3_RevHP.v_dot_air_max(unit = "m3/h") = 18000.0 "Maximum volume flow of air [m3/h]";
  parameter Real OC_3_RevHP.Volt_max(quantity = "ElectricPotential", unit = "V") = 10.0 "Max voltage signal input to the OC [V]";
  parameter Real OC_3_RevHP.Volt_Input(quantity = "ElectricPotential", unit = "V") = 10.0 "Voltage signal input to the OC [V]";
  parameter Real OC_3_RevHP.A(quantity = "Area", unit = "m2") = 221.4 "Heat exchange surface area [m2]";
  parameter Real OC_3_RevHP.U(unit = "kW/(K.m2)") = 0.03749723032 "Overall heat transfer coefficient [kW/m2.°C]";
  parameter Real OC_3_RevHP.RPM_max(unit = "RPM") = 900.0 "Max RPM of the fan";
  parameter Real OC_3_RevHP.Pel_max(quantity = "Power", unit = "W") = 1.4 "Maximum electrical power consumption of OC";
  constant Real OC_3_RevHP.rho(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1039.7392 "34% Glycol-Water  Mixture Density [kg/m3]";
  constant Real OC_3_RevHP.rho_air(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 1.225 "Density of Air[kg/m3]";
  constant Real OC_3_RevHP.cp_air(unit = "kJ/(kg.K)") = 1.005 "Specific heat transfer coefficient of air [kJ/(kg.K)]";
  constant Real OC_3_RevHP.cpw(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water[kJ/(kg.K)]";
  Real OC_3_RevHP.OC_HC_B_T_M__FL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature that leaves the OC going to AdCM/Rev_HP [°C]";
  Real OC_3_RevHP.OC_HC_B_T_M__RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature that enters the OC coming from the AdCM/Rev_HP [°C]";
  Real OC_3_RevHP.T_air_out(quantity = "ThermodynamicTemperature", unit = "degC") "Air temperature at fan outlet[°C]";
  Real OC_3_RevHP.OC_HC_B_T_M__FL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_3_RevHP.OC_HC_B_T_M__RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_3_RevHP.T_air_out_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real OC_3_RevHP.m_dot_OC(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate of glycol-water mixture in the OC circuit[kg/s]";
  Real OC_3_RevHP.m_dot_air(quantity = "MassFlowRate", unit = "kg/s") "Mass flow rate of air at fan inlet [kg/s]";
  Real OC_3_RevHP.v_dot_OC(unit = "m3/h") "Volume flow rate of glycol-water mixture in the OC circuit [m³/h]";
  Real OC_3_RevHP.Chot(unit = "kW/K") "Heat capacity rate of the hot fluid[kW/K]";
  Real OC_3_RevHP.Ccold(unit = "kW/K") "Heat capacity rate of cold fluid[kW/K]";
  Real OC_3_RevHP.Cmax(unit = "kW/K") "Maximum heat capacity rate [kW/K]";
  Real OC_3_RevHP.Cmin(unit = "kW/K") "Minimum heat capacity rate [kW/K]";
  Real OC_3_RevHP.Cr(unit = "kW/K") "Heat capacity ratio";
  Real OC_3_RevHP.qmax(quantity = "Power", unit = "W") "Maximum heat that could be transferred between the fluids per unit time[kW]";
  Real OC_3_RevHP.q(quantity = "Power", unit = "W") "Real heat transfer between the fluid [kW]";
  Real OC_3_RevHP.NTU(unit = "1") "Number of Transfer Units (NTU)";
  Real OC_3_RevHP.eff(unit = "1") "Effectiveness";
  Real OC_3_RevHP.Volt_real(quantity = "ElectricPotential", unit = "V") "Real Voltage Signal to OC [V]";
  Real OC_3_RevHP.RPM_real(unit = "RPM") "Real RPM of the fan";
  Real OC_3_RevHP.OC_HC_E_PE_M(quantity = "Power", unit = "W") "Real electrical power consumption of OC";
  Real OC_3_RevHP.v_dot_air_real(unit = "m3/h") "Real air volume flow [m3/h]";
  Real OC_3_RevHP.OC_RevHP_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real OC_3_RevHP.OC_RevHP_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real OC_3_RevHP.OC_RevHP_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real OC_3_RevHP.T_amb.T(quantity = "ThermodynamicTemperature", unit = "degC");
  parameter Real CTES_Loop.T_ini_set(quantity = "ThermodynamicTemperature", unit = "degC") = 15.0 "Initial temperature of the tank, for AdCM this should be 18<= Tini <= 28°C [°C]";
  parameter Real CTES_Loop.D(quantity = "Length", unit = "m") = 1.0 "Diameter of the tank [m]";
  parameter Real CTES_Loop.h(quantity = "Length", unit = "m") = 2.196 "Height of the tank [m]";
  parameter Real CTES_Loop.t(quantity = "Length", unit = "m") = 0.0125 "Thickness of walls [m]";
  parameter Real CTES_Loop.kappa(unit = "kW/(K.m2)") = 0.001 "Heat transfer coefficient of storage walls[kW/(m2.K)], depends on tank and insulation material";
  parameter Real CTES_Loop.lambda_eff(unit = "kW/(m.K)") = 0.0015 "Effective vertical heat conductivity considering thermal conduction and convection [kW/(m.K)], Eicker Book/Paper";
  parameter Integer CTES_Loop.n = 40 "Number of Layers in Tank";
  parameter Integer CTES_Loop.RevHP_RL_Layer = 40 "Define layer from which water goes to RevHP";
  parameter Integer CTES_Loop.Load_FL_Layer = 10 "Define layer from which water goes to Load";
  parameter Integer CTES_Loop.AdCM_RL_Layer = 40 "Define layer from which water goes to AdCM";
  parameter Integer CTES_Loop.Temp1 = 40 "Layer which controls the Hysteresis";
  parameter Integer CTES_Loop.Temp2 = 10 "Layer which controls the Hysteresis";
  constant Real CTES_Loop.rho(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0) = 994.3025 "Water density [kg/m3]";
  constant Real CTES_Loop.cp(unit = "kJ/(kg.K)") = 4.18 "Specific heat transfer coefficient of water [kJ/(kg.K)]";
  constant Real CTES_Loop.pi = 3.14159265358979;
  Real CTES_Loop.CTES_H_W_T_M_IT[1](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[2](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[3](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[4](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[5](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[6](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[7](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[8](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[9](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[10](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[11](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[12](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[13](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[14](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[15](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[16](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[17](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[18](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[19](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[20](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[21](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[22](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[23](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[24](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[25](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[26](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[27](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[28](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[29](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[30](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[31](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[32](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[33](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[34](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[35](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[36](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[37](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[38](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[39](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.CTES_H_W_T_M_IT[40](quantity = "ThermodynamicTemperature", unit = "degC") "Array of of size n denoting temperature of 1 to nth layer [°C]";
  Real CTES_Loop.T_CTES_AdCM_In(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming from the AdCM [°C]";
  Real CTES_Loop.T_CTES_RevHP_In(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming from the RevHP [°C]";
  Real CTES_Loop.T_CTES_LOAD_RL(quantity = "ThermodynamicTemperature", unit = "degC") "Temperature coming back from the LOAD [°C]";
  Real CTES_Loop.T_ini[1](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[2](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[3](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[4](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[5](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[6](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[7](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[8](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[9](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[10](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[11](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[12](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[13](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[14](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[15](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[16](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[17](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[18](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[19](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[20](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[21](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[22](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[23](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[24](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[25](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[26](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[27](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[28](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[29](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[30](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[31](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[32](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[33](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[34](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[35](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[36](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[37](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[38](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[39](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.T_ini[40](quantity = "ThermodynamicTemperature", unit = "degC") "fill an array of size n with value T_ini_set that is defined as parameter";
  Real CTES_Loop.CTES_H_W_T_M_IT_K[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[11](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[12](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[13](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[14](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[15](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[16](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[17](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[18](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[19](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[20](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[21](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[22](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[23](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[24](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[25](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[26](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[27](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[28](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[29](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[30](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[31](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[32](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[33](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[34](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[35](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[36](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[37](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[38](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[39](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.CTES_H_W_T_M_IT_K[40](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[1](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[2](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[3](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[4](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[5](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[6](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[7](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[8](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[9](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[10](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[11](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[12](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[13](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[14](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[15](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[16](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[17](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[18](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[19](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[20](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[21](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[22](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[23](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[24](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[25](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[26](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[27](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[28](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[29](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[30](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[31](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[32](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[33](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[34](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[35](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[36](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[37](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[38](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[39](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_ini_K[40](quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_amb_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_CTES_AdCM_In_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_CTES_RevHP_In_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.T_CTES_LOAD_RL_K(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 288.15, nominal = 300.0);
  Real CTES_Loop.m_dot[1](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[2](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[3](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[4](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[5](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[6](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[7](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[8](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[9](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[10](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[11](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[12](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[13](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[14](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[15](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[16](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[17](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[18](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[19](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[20](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[21](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[22](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[23](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[24](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[25](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[26](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[27](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[28](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[29](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[30](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[31](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[32](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[33](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[34](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[35](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[36](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[37](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[38](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[39](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot[40](quantity = "MassFlowRate", unit = "kg/s") "Array of size 'n' representing the effective mass flows between the layers, where layer 1 is at bottom and n at top";
  Real CTES_Loop.m_dot_AdCM(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow at the entrance of the CTES (Bottom Layer) [kg/s]";
  Real CTES_Loop.m_dot_RevHP(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow at the entrance of the CTES (Bottom Layer) [kg/s]";
  Real CTES_Loop.m_dot_LOAD(quantity = "MassFlowRate", unit = "kg/s") "Mass Flow going to the LOAD (Bottom Layer) [kg/s]";
  Real CTES_Loop.Alayer(quantity = "Area", unit = "m2") "Cross section of the respective layer in contact with above or below layer[m2]";
  Real CTES_Loop.Aamb(quantity = "Area", unit = "m2") "Cross Section of the respective layer in contact with tank surface and transfering heat to ambient [m2]";
  Real CTES_Loop.zi(quantity = "Length", unit = "m") "Height of each layer. Height of tank / Number of Layers zi=h/n";
  Real CTES_Loop.mi(quantity = "Mass", unit = "kg", min = 0.0) "Water mass in the control volume [kg]";
  Real CTES_Loop.di(quantity = "Length", unit = "m") "Considering internal diameter of Tank";
  Real CTES_Loop.d_pos(unit = "1");
  Real CTES_Loop.d_neg(unit = "1");
  Real CTES_Loop.CTES_AdCM_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.CTES_AdCM_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real CTES_Loop.CTES_LOAD_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.CTES_LOAD_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real CTES_Loop.CTES_AdCM_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.CTES_LOAD_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.CTES_RevHP_In.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.CTES_RevHP_In.m_dot(quantity = "MassFlowRate", unit = "kg/s");
  Real CTES_Loop.CTES_RevHP_Out.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.T_amb.T(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.DobleTempOut.T1(quantity = "ThermodynamicTemperature", unit = "degC");
  Real CTES_Loop.DobleTempOut.T2(quantity = "ThermodynamicTemperature", unit = "degC");
initial equation
  CHP.heat = true;
  AdCM.cool = true;
  RevHP_HP.heat = true;
  RevHP_CC.cool = true;
  HTES_Loop.HTES_H_W_T_M_IT_K[1] = HTES_Loop.T_ini_K[1] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[2] = HTES_Loop.T_ini_K[2] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[3] = HTES_Loop.T_ini_K[3] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[4] = HTES_Loop.T_ini_K[4] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[5] = HTES_Loop.T_ini_K[5] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[6] = HTES_Loop.T_ini_K[6] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[7] = HTES_Loop.T_ini_K[7] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[8] = HTES_Loop.T_ini_K[8] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[9] = HTES_Loop.T_ini_K[9] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[10] = HTES_Loop.T_ini_K[10] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[11] = HTES_Loop.T_ini_K[11] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[12] = HTES_Loop.T_ini_K[12] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[13] = HTES_Loop.T_ini_K[13] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[14] = HTES_Loop.T_ini_K[14] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[15] = HTES_Loop.T_ini_K[15] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[16] = HTES_Loop.T_ini_K[16] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[17] = HTES_Loop.T_ini_K[17] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[18] = HTES_Loop.T_ini_K[18] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[19] = HTES_Loop.T_ini_K[19] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[20] = HTES_Loop.T_ini_K[20] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[21] = HTES_Loop.T_ini_K[21] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[22] = HTES_Loop.T_ini_K[22] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[23] = HTES_Loop.T_ini_K[23] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[24] = HTES_Loop.T_ini_K[24] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[25] = HTES_Loop.T_ini_K[25] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[26] = HTES_Loop.T_ini_K[26] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[27] = HTES_Loop.T_ini_K[27] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[28] = HTES_Loop.T_ini_K[28] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[29] = HTES_Loop.T_ini_K[29] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[30] = HTES_Loop.T_ini_K[30] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[31] = HTES_Loop.T_ini_K[31] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[32] = HTES_Loop.T_ini_K[32] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[33] = HTES_Loop.T_ini_K[33] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[34] = HTES_Loop.T_ini_K[34] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[35] = HTES_Loop.T_ini_K[35] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[36] = HTES_Loop.T_ini_K[36] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[37] = HTES_Loop.T_ini_K[37] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[38] = HTES_Loop.T_ini_K[38] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[39] = HTES_Loop.T_ini_K[39] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[40] = HTES_Loop.T_ini_K[40] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[41] = HTES_Loop.T_ini_K[41] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[42] = HTES_Loop.T_ini_K[42] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[43] = HTES_Loop.T_ini_K[43] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[44] = HTES_Loop.T_ini_K[44] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[45] = HTES_Loop.T_ini_K[45] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[46] = HTES_Loop.T_ini_K[46] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[47] = HTES_Loop.T_ini_K[47] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[48] = HTES_Loop.T_ini_K[48] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[49] = HTES_Loop.T_ini_K[49] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[50] = HTES_Loop.T_ini_K[50] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[51] = HTES_Loop.T_ini_K[51] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[52] = HTES_Loop.T_ini_K[52] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[53] = HTES_Loop.T_ini_K[53] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[54] = HTES_Loop.T_ini_K[54] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[55] = HTES_Loop.T_ini_K[55] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[56] = HTES_Loop.T_ini_K[56] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[57] = HTES_Loop.T_ini_K[57] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[58] = HTES_Loop.T_ini_K[58] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[59] = HTES_Loop.T_ini_K[59] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[60] = HTES_Loop.T_ini_K[60] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[61] = HTES_Loop.T_ini_K[61] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[62] = HTES_Loop.T_ini_K[62] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[63] = HTES_Loop.T_ini_K[63] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[64] = HTES_Loop.T_ini_K[64] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[65] = HTES_Loop.T_ini_K[65] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[66] = HTES_Loop.T_ini_K[66] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[67] = HTES_Loop.T_ini_K[67] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[68] = HTES_Loop.T_ini_K[68] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[69] = HTES_Loop.T_ini_K[69] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[70] = HTES_Loop.T_ini_K[70] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[71] = HTES_Loop.T_ini_K[71] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[72] = HTES_Loop.T_ini_K[72] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[73] = HTES_Loop.T_ini_K[73] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[74] = HTES_Loop.T_ini_K[74] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[75] = HTES_Loop.T_ini_K[75] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[76] = HTES_Loop.T_ini_K[76] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[77] = HTES_Loop.T_ini_K[77] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[78] = HTES_Loop.T_ini_K[78] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[79] = HTES_Loop.T_ini_K[79] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[80] = HTES_Loop.T_ini_K[80] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[81] = HTES_Loop.T_ini_K[81] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[82] = HTES_Loop.T_ini_K[82] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[83] = HTES_Loop.T_ini_K[83] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[84] = HTES_Loop.T_ini_K[84] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[85] = HTES_Loop.T_ini_K[85] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[86] = HTES_Loop.T_ini_K[86] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[87] = HTES_Loop.T_ini_K[87] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[88] = HTES_Loop.T_ini_K[88] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[89] = HTES_Loop.T_ini_K[89] "Equating both directly since they are both arrays of size n";
  HTES_Loop.HTES_H_W_T_M_IT_K[90] = HTES_Loop.T_ini_K[90] "Equating both directly since they are both arrays of size n";
  HTES_Loop.heat = true;
  CTES_Loop.CTES_H_W_T_M_IT_K[1] = CTES_Loop.T_ini_K[1] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[2] = CTES_Loop.T_ini_K[2] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[3] = CTES_Loop.T_ini_K[3] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[4] = CTES_Loop.T_ini_K[4] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[5] = CTES_Loop.T_ini_K[5] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[6] = CTES_Loop.T_ini_K[6] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[7] = CTES_Loop.T_ini_K[7] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[8] = CTES_Loop.T_ini_K[8] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[9] = CTES_Loop.T_ini_K[9] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[10] = CTES_Loop.T_ini_K[10] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[11] = CTES_Loop.T_ini_K[11] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[12] = CTES_Loop.T_ini_K[12] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[13] = CTES_Loop.T_ini_K[13] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[14] = CTES_Loop.T_ini_K[14] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[15] = CTES_Loop.T_ini_K[15] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[16] = CTES_Loop.T_ini_K[16] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[17] = CTES_Loop.T_ini_K[17] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[18] = CTES_Loop.T_ini_K[18] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[19] = CTES_Loop.T_ini_K[19] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[20] = CTES_Loop.T_ini_K[20] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[21] = CTES_Loop.T_ini_K[21] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[22] = CTES_Loop.T_ini_K[22] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[23] = CTES_Loop.T_ini_K[23] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[24] = CTES_Loop.T_ini_K[24] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[25] = CTES_Loop.T_ini_K[25] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[26] = CTES_Loop.T_ini_K[26] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[27] = CTES_Loop.T_ini_K[27] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[28] = CTES_Loop.T_ini_K[28] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[29] = CTES_Loop.T_ini_K[29] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[30] = CTES_Loop.T_ini_K[30] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[31] = CTES_Loop.T_ini_K[31] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[32] = CTES_Loop.T_ini_K[32] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[33] = CTES_Loop.T_ini_K[33] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[34] = CTES_Loop.T_ini_K[34] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[35] = CTES_Loop.T_ini_K[35] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[36] = CTES_Loop.T_ini_K[36] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[37] = CTES_Loop.T_ini_K[37] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[38] = CTES_Loop.T_ini_K[38] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[39] = CTES_Loop.T_ini_K[39] "Equating both directly since they are both arrays of size n";
  CTES_Loop.CTES_H_W_T_M_IT_K[40] = CTES_Loop.T_ini_K[40] "Equating both directly since they are both arrays of size n";
equation
  Switch.CHP_Switch = 1.0;
  Switch.AdCM_Switch = 0.0;
  Switch.RevHP_HP_Switch = 0.0;
  Switch.RevHP_CC_Switch = 1.0;
  Switch.Coil_Switch = 0.0;
  CHP.CHP_H_W_T_M_FL_K = 273.15 + CHP.CHP_H_W_T_M_FL;
  CHP.CHP_H_W_T_M_RL_K = 273.15 + CHP.CHP_H_W_T_M_RL;
  CHP.CHP_H_W_MF_M = 0.2761951388888889 * CHP.CHP_ON_int * CHP.CHP_H_W_VF_M;
  CHP.CHP_H_W_MF_M_Set = 0.2761951388888889 * CHP.CHP_H_W_VF_M;
  CHP.CHP_H_W_T_M_RL = CHP.CHP_HTES_In.T "Return Temperature that comes from the HTES [°C]";
  CHP.CHP_H_W_T_M_FL = CHP.CHP_HTES_Out.T "Feed Line temperature that goes to the HTES [°C]";
  CHP.CHP_H_W_MF_M = CHP.CHP_HTES_Out.m_dot "Mass Flow that goes to the HTES [kg/s]";
  CHP.Temp_Low = CHP.DobleTempIn.T1 "Temperature corresponding to layer selected by user in Tank Model";
  CHP.Temp_High = CHP.DobleTempIn.T2 "Temperature corresponding to layer selected by user in Tank Model";
  CHP.CHP_ON_int = if CHP.heat then CHP.CHP_ON else 0.0;
  CHP.PartLoad_Ratio = 0.935962276499541 + 0.00389339241401334 * CHP.CHP_H_W_T_M_RL + -5.18855946923975e-05 * CHP.CHP_H_W_T_M_RL ^ 2.0;
  CHP.Pth_CHP = CHP.PartLoad_Ratio * CHP.Pth_CHP_Nominal;
  CHP.CHP_H_W_PE_M = CHP.CHP_ON_int * CHP.Pel_CHP_Nominal "assuming electrical output is always constant";
  560.794 * der(CHP.CHP_H_W_PT_M) + CHP.CHP_H_W_PT_M = CHP.Pth_CHP * CHP.CHP_ON_int " T*der(y) + y = K*u";
  CHP.CHP_H_W_VF_M = 0.433352645 + -0.01514531 * CHP.CHP_H_W_T_M_RL + 0.00024329 * CHP.CHP_H_W_T_M_RL ^ 2.0;
  CHP.CHP_H_W_T_M_FL_K = CHP.CHP_H_W_T_M_RL_K + 0.2392344497607656 * CHP.CHP_H_W_PT_M / CHP.CHP_H_W_MF_M_Set;
  CHP.CHP_H_F_VF_M = 1000.0 * (CHP.CHP_H_W_PE_M + CHP.CHP_H_W_PT_M) / (853.5 * (CHP.CHP_eta_Thermal + CHP.CHP_eta_Electrical) * CHP.CHP_Fuel_HHV) "[kW] * 1000 / [(kWh/kg) *(kg/m³)] = (l/h) ";
  Load.m_dot_LOAD = 0.2761951388888889 * Load.LOAD_HC_W_VF_M___;
  Load.m_dot_CC = 0.2761951388888889 * Load.v_dot_CC;
  Load.LOAD_HC_W_T_M__FL_ = Load.LOAD_In.T;
  Load.LOAD_HC_W_T_M__RL_ = Load.LOAD_Out.T;
  Load.m_dot_LOAD = Load.LOAD_Out.m_dot;
  Load.LOAD_HC_W_T_M__FL__K = 273.15 + Load.LOAD_HC_W_T_M__FL_;
  Load.T_CC_RL_K = 273.15 + Load.T_CC_RL;
  Load.LOAD_HC_W_T_M__RL_ = Load.T_CC_RL "Temp coming back from CC is the one going back to the Tank";
  Load.Pth_CC = 4.18 * Load.m_dot_CC * (Load.T_CC_FL - Load.T_CC_RL);
  Load.Pth_CC = 4.18 * Load.m_dot_LOAD * (Load.LOAD_HC_W_T_M__FL__K - Load.T_CC_RL_K);
  HX_3_Small.T_h_in = HX_3_Small.HX_AdCM_in.T "inlet hot fluid temperature";
  HX_3_Small.T_h_out = HX_3_Small.HX_AdCM_Out.T "outlet hot fluid temperature";
  HX_3_Small.T_c_in = HX_3_Small.HX_OC_in.T "inlet cold fluid temperature";
  HX_3_Small.T_c_out = HX_3_Small.HX_OC_Out.T "outlet cold fluid temperature";
  HX_3_Small.m_dot_c_in = HX_3_Small.HX_OC_in.m_dot "outlet cold mass flow";
  HX_3_Small.m_dot_h_in = HX_3_Small.HX_AdCM_in.m_dot "inlet hot mass flow";
  HX_3_Small.T_h_in_K = 273.15 + HX_3_Small.T_h_in;
  HX_3_Small.T_c_in_K = 273.15 + HX_3_Small.T_c_in;
  HX_3_Small.T_h_out_K = 273.15 + HX_3_Small.T_h_out;
  HX_3_Small.T_c_out_K = 273.15 + HX_3_Small.T_c_out;
  HX_3_Small.Chot = 4.16991 * HX_3_Small.m_dot_h_in;
  HX_3_Small.Ccold = 3.66736 * HX_3_Small.m_dot_c_in;
  HX_3_Small.Cmin = min(HX_3_Small.Chot, HX_3_Small.Ccold);
  HX_3_Small.Cmax = max(HX_3_Small.Chot, HX_3_Small.Ccold);
  HX_3_Small.qmax = HX_3_Small.Cmin * (HX_3_Small.T_h_in - HX_3_Small.T_c_in);
  HX_3_Small.eff = (1.0 - exp(HX_3_Small.NTU * (HX_3_Small.Cr - 1.0))) / (1.0 - HX_3_Small.Cr * exp(HX_3_Small.NTU * (HX_3_Small.Cr - 1.0)));
  HX_3_Small.q = HX_3_Small.eff * HX_3_Small.qmax;
  if HX_3_Small.Cmax == 0.0 or HX_3_Small.Cmin == 0.0 then
    HX_3_Small.Cr = 0.0;
    HX_3_Small.NTU = 0.0;
    HX_3_Small.T_h_in - HX_3_Small.T_h_out = 0.0;
    HX_3_Small.T_c_out - HX_3_Small.T_c_in = 0.0;
  else
    HX_3_Small.Cr = HX_3_Small.Cmin / HX_3_Small.Cmax;
    HX_3_Small.NTU = HX_3_Small.U * HX_3_Small.A / HX_3_Small.Cmin;
    HX_3_Small.q = HX_3_Small.Chot * (HX_3_Small.T_h_in - HX_3_Small.T_h_out);
    HX_3_Small.q = HX_3_Small.Ccold * (HX_3_Small.T_c_out - HX_3_Small.T_c_in);
  end if;
  AdCM.ADCM_C_W_T_M_HT_FL_K = 273.15 + AdCM.ADCM_C_W_T_M_HT_FL;
  AdCM.ADCM_C_W_T_M_LT_FL_K = 273.15 + AdCM.ADCM_C_W_T_M_LT_FL;
  AdCM.ADCM_C_W_T_M_MT_RL_K = 273.15 + AdCM.ADCM_C_W_T_M_MT_RL;
  AdCM.ADCM_C_W_T_M_MT_FL_K = 273.15 + AdCM.ADCM_C_W_T_M_MT_FL;
  AdCM.ADCM_C_W_T_M_LT_RL_K = 273.15 + AdCM.ADCM_C_W_T_M_LT_RL;
  AdCM.ADCM_C_W_T_M_HT_RL_K = 273.15 + AdCM.ADCM_C_W_T_M_HT_RL;
  AdCM.ADCM_C_W_VF_M_LT_ = AdCM.AdCM_ON_int * AdCM.v_dot_AdCM_LT_set;
  AdCM.ADCM_C_W_VF_M_MT_ = AdCM.AdCM_ON_int * AdCM.v_dot_AdCM_MT_set;
  AdCM.ADCM_C_W_VF_M_HT_ = AdCM.AdCM_ON_int * AdCM.v_dot_AdCM_HT_set;
  AdCM.m_dot_AdCM_LT = 0.2761951388888889 * AdCM.ADCM_C_W_VF_M_LT_ "Volume of water against time [m³/h]. Forcing the mass flow to be 0 when component is OFF";
  AdCM.m_dot_AdCM_MT = 0.2761951388888889 * AdCM.ADCM_C_W_VF_M_MT_;
  AdCM.m_dot_AdCM_HT = 0.2761951388888889 * AdCM.ADCM_C_W_VF_M_HT_;
  AdCM.m_dot_AdCM_LT_Set = 0.2761951388888889 * AdCM.v_dot_AdCM_LT_set "Volume of water against time [m³/h]. Forcing the mass flow to be 0 when component is OFF";
  AdCM.m_dot_AdCM_MT_Set = 0.2761951388888889 * AdCM.v_dot_AdCM_MT_set;
  AdCM.m_dot_AdCM_HT_Set = 0.2761951388888889 * AdCM.v_dot_AdCM_HT_set;
  AdCM.AdCM_HTES_Out.T = AdCM.ADCM_C_W_T_M_HT_FL;
  AdCM.AdCM_HX_In.T = AdCM.ADCM_C_W_T_M_MT_RL;
  AdCM.AdCM_CTES_Out.T = AdCM.ADCM_C_W_T_M_LT_FL;
  AdCM.AdCM_CTES_In.T = AdCM.ADCM_C_W_T_M_LT_RL;
  AdCM.AdCM_HTES_In.T = AdCM.ADCM_C_W_T_M_HT_RL;
  AdCM.AdCM_HX_Out.T = AdCM.ADCM_C_W_T_M_MT_FL;
  AdCM.AdCM_HTES_Out.m_dot = AdCM.m_dot_AdCM_HT;
  AdCM.AdCM_CTES_Out.m_dot = AdCM.m_dot_AdCM_LT;
  AdCM.AdCM_HX_Out.m_dot = AdCM.m_dot_AdCM_MT;
  AdCM.DobleT_In_CTES.T1 = AdCM.Temp_Low;
  AdCM.DobleT_In_CTES.T2 = AdCM.Temp_High;
  AdCM.AdCM_ON_int = if AdCM.cool then AdCM.AdCM_ON else 0.0;
  AdCM.COP = -0.049623287373 + 0.01893348591 * AdCM.ADCM_C_W_T_M_LT_RL + 0.013340776694 * AdCM.ADCM_C_W_T_M_HT_RL + 0.017822939671 * AdCM.ADCM_C_W_T_M_MT_RL + -0.001280352166 * AdCM.ADCM_C_W_T_M_LT_RL ^ 2.0 + -0.000190832894 * AdCM.ADCM_C_W_T_M_HT_RL ^ 2.0 + -0.001993352016 * AdCM.ADCM_C_W_T_M_MT_RL ^ 2.0 + AdCM.ADCM_C_W_T_M_LT_RL * (-0.000334095159 * AdCM.ADCM_C_W_T_M_HT_RL + 0.001455689548 * AdCM.ADCM_C_W_T_M_MT_RL) + 0.000569253554 * AdCM.ADCM_C_W_T_M_HT_RL * AdCM.ADCM_C_W_T_M_MT_RL + 1.3421174e-05 * AdCM.ADCM_C_W_T_M_LT_RL * AdCM.ADCM_C_W_T_M_HT_RL * AdCM.ADCM_C_W_T_M_MT_RL;
  AdCM.ADCM_C_W_PT_M_LT_ = AdCM.AdCM_ON_int * (4.07950934099 + 0.04152472361 * AdCM.ADCM_C_W_T_M_LT_RL + 0.160630808297 * AdCM.ADCM_C_W_T_M_HT_RL + -0.859860168466 * AdCM.ADCM_C_W_T_M_MT_RL + 0.003462744142 * AdCM.ADCM_C_W_T_M_LT_RL ^ 2.0 + -0.001049096999 * AdCM.ADCM_C_W_T_M_HT_RL ^ 2.0 + 0.015142231276 * AdCM.ADCM_C_W_T_M_MT_RL ^ 2.0 + AdCM.ADCM_C_W_T_M_LT_RL * (0.016955368833 * AdCM.ADCM_C_W_T_M_HT_RL + -0.016151596215 * AdCM.ADCM_C_W_T_M_MT_RL) + -0.001917799045 * AdCM.ADCM_C_W_T_M_HT_RL * AdCM.ADCM_C_W_T_M_MT_RL + -0.000200778961 * AdCM.ADCM_C_W_T_M_LT_RL * AdCM.ADCM_C_W_T_M_HT_RL * AdCM.ADCM_C_W_T_M_MT_RL);
  AdCM.ADCM_C_W_PT_M_HT_ = AdCM.ADCM_C_W_PT_M_LT_ / AdCM.COP - AdCM.SF "the SF is a fit value for real life experiments, but not true, we need to find the real value";
  AdCM.ADCM_C_W_PT_M_MT_ = AdCM.ADCM_C_W_PT_M_HT_ + AdCM.ADCM_C_W_PT_M_LT_ "This means a 100% Efficiency. However we are already considering COP and ADCM_C_W_PT_M_LT_ curve fits";
  AdCM.ADCM_C_W_T_M_LT_FL_K = AdCM.ADCM_C_W_T_M_LT_RL_K + -0.2392344497607656 * AdCM.ADCM_C_W_PT_M_LT_ / AdCM.m_dot_AdCM_LT_Set;
  AdCM.ADCM_C_W_T_M_MT_FL_K = AdCM.ADCM_C_W_T_M_MT_RL_K + 0.2392344497607656 * AdCM.ADCM_C_W_PT_M_MT_ / AdCM.m_dot_AdCM_MT_Set;
  AdCM.ADCM_C_W_T_M_HT_FL_K = AdCM.ADCM_C_W_T_M_HT_RL_K + -0.2392344497607656 * AdCM.ADCM_C_W_PT_M_HT_ / AdCM.m_dot_AdCM_HT_Set;
  HX_1_Big.T_h_in = HX_1_Big.HX_AdCM_in.T "inlet hot fluid temperature";
  HX_1_Big.T_h_out = HX_1_Big.HX_AdCM_Out.T "outlet hot fluid temperature";
  HX_1_Big.T_c_in = HX_1_Big.HX_OC_in.T "inlet cold fluid temperature";
  HX_1_Big.T_c_out = HX_1_Big.HX_OC_Out.T "outlet cold fluid temperature";
  HX_1_Big.m_dot_c_in = HX_1_Big.HX_OC_in.m_dot "outlet cold mass flow";
  HX_1_Big.m_dot_h_in = HX_1_Big.HX_AdCM_in.m_dot "inlet hot mass flow";
  HX_1_Big.T_h_in_K = 273.15 + HX_1_Big.T_h_in;
  HX_1_Big.T_c_in_K = 273.15 + HX_1_Big.T_c_in;
  HX_1_Big.T_h_out_K = 273.15 + HX_1_Big.T_h_out;
  HX_1_Big.T_c_out_K = 273.15 + HX_1_Big.T_c_out;
  HX_1_Big.Chot = 4.16991 * HX_1_Big.m_dot_h_in;
  HX_1_Big.Ccold = 3.66736 * HX_1_Big.m_dot_c_in;
  HX_1_Big.Cmin = min(HX_1_Big.Chot, HX_1_Big.Ccold);
  HX_1_Big.Cmax = max(HX_1_Big.Chot, HX_1_Big.Ccold);
  HX_1_Big.qmax = HX_1_Big.Cmin * (HX_1_Big.T_h_in - HX_1_Big.T_c_in);
  HX_1_Big.eff = (1.0 - exp(HX_1_Big.NTU * (HX_1_Big.Cr - 1.0))) / (1.0 - HX_1_Big.Cr * exp(HX_1_Big.NTU * (HX_1_Big.Cr - 1.0)));
  HX_1_Big.q = HX_1_Big.eff * HX_1_Big.qmax;
  if HX_1_Big.Cmax == 0.0 or HX_1_Big.Cmin == 0.0 then
    HX_1_Big.Cr = 0.0;
    HX_1_Big.NTU = 0.0;
    HX_1_Big.T_h_in - HX_1_Big.T_h_out = 0.0;
    HX_1_Big.T_c_out - HX_1_Big.T_c_in = 0.0;
  else
    HX_1_Big.Cr = HX_1_Big.Cmin / HX_1_Big.Cmax;
    HX_1_Big.NTU = HX_1_Big.U * HX_1_Big.A / HX_1_Big.Cmin;
    HX_1_Big.q = HX_1_Big.Chot * (HX_1_Big.T_h_in - HX_1_Big.T_h_out);
    HX_1_Big.q = HX_1_Big.Ccold * (HX_1_Big.T_c_out - HX_1_Big.T_c_in);
  end if;
  RevHP_HP.RevHP_HC_W_T_M_MT_FL__K = 273.15 + RevHP_HP.RevHP_HC_W_T_M_MT_FL_;
  RevHP_HP.RevHP_HC_W_T_M_LT_FL__K = 273.15 + RevHP_HP.RevHP_HC_W_T_M_LT_FL_;
  RevHP_HP.RevHP_HC_W_T_M_MT_RL__K = 273.15 + RevHP_HP.RevHP_HC_W_T_M_MT_RL_;
  RevHP_HP.RevHP_HC_W_T_M_LT_RL__K = 273.15 + RevHP_HP.RevHP_HC_W_T_M_LT_RL_;
  RevHP_HP.RevHP_HC_W_VF_M_MT__ = RevHP_HP.RevHP_HP_ON_int * RevHP_HP.v_dot_HT_FL_set;
  RevHP_HP.RevHP_HC_W_VF_M_LT__ = RevHP_HP.RevHP_HP_ON_int * RevHP_HP.v_dot_MT_FL_set;
  RevHP_HP.m_dot_HT_FL = 0.2761951388888889 * RevHP_HP.RevHP_HC_W_VF_M_MT__ "Volume of water against time [m³/h]. Forcing the mass flow to be 0 when component is OFF";
  RevHP_HP.m_dot_MT_FL = 0.2761951388888889 * RevHP_HP.RevHP_HC_W_VF_M_LT__;
  RevHP_HP.m_dot_HT_FL_Set = 0.2761951388888889 * RevHP_HP.v_dot_HT_FL_set;
  RevHP_HP.m_dot_MT_FL_Set = 0.2761951388888889 * RevHP_HP.v_dot_MT_FL_set;
  RevHP_HP.RevHP_HC_W_T_M_MT_FL_ = RevHP_HP.RevHP_HX_HT_Out.T;
  RevHP_HP.RevHP_HC_W_T_M_LT_FL_ = RevHP_HP.RevHP_HX_MT_Out.T;
  RevHP_HP.RevHP_HC_W_T_M_MT_RL_ = RevHP_HP.RevHP_HX_HT_In.T;
  RevHP_HP.RevHP_HC_W_T_M_LT_RL_ = RevHP_HP.RevHP_HX_MT_In.T;
  RevHP_HP.m_dot_HT_FL = RevHP_HP.RevHP_HX_HT_Out.m_dot;
  RevHP_HP.m_dot_MT_FL = RevHP_HP.RevHP_HX_MT_Out.m_dot;
  RevHP_HP.DobleTempIn.T1 = RevHP_HP.Temp_Low "Temperature corresponding to layer selected by user in Tank Model, This is at top of tank";
  RevHP_HP.DobleTempIn.T2 = RevHP_HP.Temp_High "Temperature corresponding to layer selected by user in Tank Model, This is at bottom of tank";
  RevHP_HP.RevHP_HP_ON_int = RevHP_HP.V_HT;
  RevHP_HP.RevHP_HP_ON_int = if RevHP_HP.heat then RevHP_HP.RevHP_HP_ON else 0.0;
  RevHP_HP.RevHP_HC_W_PT_M_MT__ = RevHP_HP.RevHP_HP_ON_int * (9.0 + 0.294510922 * RevHP_HP.RevHP_HC_W_T_M_LT_RL_ + RevHP_HP.RevHP_HC_W_T_M_MT_RL_ * (0.064700246 + 0.002953381 * RevHP_HP.RevHP_HC_W_T_M_LT_RL_) + -0.001625553 * RevHP_HP.RevHP_HC_W_T_M_LT_RL_ ^ 2.0 + -0.001627312 * RevHP_HP.RevHP_HC_W_T_M_MT_RL_ ^ 2.0);
  RevHP_HP.RevHP_HC_W_PT_M_LT__ = RevHP_HP.RevHP_HC_W_PT_M_MT__ - RevHP_HP.RevHP_HC_E_PE_M___ "Equation based on the Heat Pump Cycle, check literature";
  RevHP_HP.RevHP_HC_W_T_M_MT_FL__K = RevHP_HP.RevHP_HC_W_T_M_MT_RL__K + 0.2392344497607656 * RevHP_HP.RevHP_HC_W_PT_M_MT__ / RevHP_HP.m_dot_HT_FL_Set;
  RevHP_HP.RevHP_HC_W_T_M_LT_FL__K = RevHP_HP.RevHP_HC_W_T_M_LT_RL__K + -0.2392344497607656 * RevHP_HP.RevHP_HC_W_PT_M_LT__ / RevHP_HP.m_dot_MT_FL_Set;
  RevHP_HP.RevHP_HC_E_PE_M___ = RevHP_HP.RevHP_HP_ON_int * (1.733202228 + -0.007333788 * RevHP_HP.RevHP_HC_W_T_M_LT_RL_ + RevHP_HP.RevHP_HC_W_T_M_MT_RL_ * (0.019283658 + 0.000450498 * RevHP_HP.RevHP_HC_W_T_M_LT_RL_) + -8.304799999999999e-05 * RevHP_HP.RevHP_HC_W_T_M_LT_RL_ ^ 2.0 + 0.000671146 * RevHP_HP.RevHP_HC_W_T_M_MT_RL_ ^ 2.0);
  HX_2_Big.T_h_in = HX_2_Big.HX_AdCM_in.T "inlet hot fluid temperature";
  HX_2_Big.T_h_out = HX_2_Big.HX_AdCM_Out.T "outlet hot fluid temperature";
  HX_2_Big.T_c_in = HX_2_Big.HX_OC_in.T "inlet cold fluid temperature";
  HX_2_Big.T_c_out = HX_2_Big.HX_OC_Out.T "outlet cold fluid temperature";
  HX_2_Big.m_dot_c_in = HX_2_Big.HX_OC_in.m_dot "outlet cold mass flow";
  HX_2_Big.m_dot_h_in = HX_2_Big.HX_AdCM_in.m_dot "inlet hot mass flow";
  HX_2_Big.T_h_in_K = 273.15 + HX_2_Big.T_h_in;
  HX_2_Big.T_c_in_K = 273.15 + HX_2_Big.T_c_in;
  HX_2_Big.T_h_out_K = 273.15 + HX_2_Big.T_h_out;
  HX_2_Big.T_c_out_K = 273.15 + HX_2_Big.T_c_out;
  HX_2_Big.Chot = 4.16991 * HX_2_Big.m_dot_h_in;
  HX_2_Big.Ccold = 3.66736 * HX_2_Big.m_dot_c_in;
  HX_2_Big.Cmin = min(HX_2_Big.Chot, HX_2_Big.Ccold);
  HX_2_Big.Cmax = max(HX_2_Big.Chot, HX_2_Big.Ccold);
  HX_2_Big.qmax = HX_2_Big.Cmin * (HX_2_Big.T_h_in - HX_2_Big.T_c_in);
  HX_2_Big.eff = (1.0 - exp(HX_2_Big.NTU * (HX_2_Big.Cr - 1.0))) / (1.0 - HX_2_Big.Cr * exp(HX_2_Big.NTU * (HX_2_Big.Cr - 1.0)));
  HX_2_Big.q = HX_2_Big.eff * HX_2_Big.qmax;
  if HX_2_Big.Cmax == 0.0 or HX_2_Big.Cmin == 0.0 then
    HX_2_Big.Cr = 0.0;
    HX_2_Big.NTU = 0.0;
    HX_2_Big.T_h_in - HX_2_Big.T_h_out = 0.0;
    HX_2_Big.T_c_out - HX_2_Big.T_c_in = 0.0;
  else
    HX_2_Big.Cr = HX_2_Big.Cmin / HX_2_Big.Cmax;
    HX_2_Big.NTU = HX_2_Big.U * HX_2_Big.A / HX_2_Big.Cmin;
    HX_2_Big.q = HX_2_Big.Chot * (HX_2_Big.T_h_in - HX_2_Big.T_h_out);
    HX_2_Big.q = HX_2_Big.Ccold * (HX_2_Big.T_c_out - HX_2_Big.T_c_in);
  end if;
  RevHP_CC.RevHP_HC_W_T_M_LT_FL_K = 273.15 + RevHP_CC.RevHP_HC_W_T_M_LT_FL;
  RevHP_CC.RevHP_HC_W_T_M_MT_FL_K = 273.15 + RevHP_CC.RevHP_HC_W_T_M_MT_FL;
  RevHP_CC.RevHP_HC_W_T_M_LT_RL_K = 273.15 + RevHP_CC.RevHP_HC_W_T_M_LT_RL;
  RevHP_CC.RevHP_HC_W_T_M_MT_RL_K = 273.15 + RevHP_CC.RevHP_HC_W_T_M_MT_RL;
  RevHP_CC.RevHP_HC_W_VF_M_LT__ = RevHP_CC.RevHP_CC_ON_int * RevHP_CC.v_dot_LT_FL_set;
  RevHP_CC.RevHP_HC_W_VF_M_MT__ = RevHP_CC.RevHP_CC_ON_int * RevHP_CC.v_dot_MT_FL_set;
  RevHP_CC.m_dot_LT_FL = 0.2761951388888889 * RevHP_CC.RevHP_HC_W_VF_M_LT__ "Volume of water against time [m³/h]. Forcing the mass flow to be 0 when component is OFF";
  RevHP_CC.m_dot_MT_FL = 0.2761951388888889 * RevHP_CC.RevHP_HC_W_VF_M_MT__;
  RevHP_CC.m_dot_LT_FL_Set = 0.2761951388888889 * RevHP_CC.v_dot_LT_FL_set "Volume of water against time [m³/h]. Forcing the mass flow to be 0 when component is OFF";
  RevHP_CC.m_dot_MT_FL_Set = 0.2761951388888889 * RevHP_CC.v_dot_MT_FL_set;
  RevHP_CC.RevHP_HC_W_T_M_LT_FL = RevHP_CC.RevHP_CTES_Out.T "LWE: Temp. going to CTES";
  RevHP_CC.RevHP_HC_W_T_M_MT_FL = RevHP_CC.RevHP_OC_Out.T "LWC: Temp. going to OC";
  RevHP_CC.RevHP_HC_W_T_M_LT_RL = RevHP_CC.RevHP_CTES_In.T "Temp. coming from CTES";
  RevHP_CC.RevHP_HC_W_T_M_MT_RL = RevHP_CC.RevHP_OC_In.T;
  RevHP_CC.m_dot_LT_FL = RevHP_CC.RevHP_CTES_Out.m_dot;
  RevHP_CC.m_dot_MT_FL = RevHP_CC.RevHP_OC_Out.m_dot;
  RevHP_CC.Temp_Low = RevHP_CC.DoubleTempIn.T1;
  RevHP_CC.Temp_High = RevHP_CC.DoubleTempIn.T2;
  RevHP_CC.RevHP_CC_ON_int = if RevHP_CC.cool then RevHP_CC.RevHP_CC_ON else 0.0;
  RevHP_CC.RevHP_HC_W_PT_M_LT__ = RevHP_CC.RevHP_CC_ON_int * (9.0 + 0.308329176 * RevHP_CC.RevHP_HC_W_T_M_LT_RL + 0.045285097 * RevHP_CC.RevHP_HC_W_T_M_MT_RL + 0.002252906 * RevHP_CC.RevHP_HC_W_T_M_LT_RL * RevHP_CC.RevHP_HC_W_T_M_MT_RL + -0.001213212 * RevHP_CC.RevHP_HC_W_T_M_LT_RL ^ 2.0 + -0.002264659 * RevHP_CC.RevHP_HC_W_T_M_MT_RL ^ 2.0);
  RevHP_CC.RevHP_HC_E_PE_M___ = RevHP_CC.RevHP_CC_ON_int * (1.833202228 + -0.007333788 * RevHP_CC.RevHP_HC_W_T_M_LT_RL + 0.019283658 * RevHP_CC.RevHP_HC_W_T_M_MT_RL + 0.000450498 * RevHP_CC.RevHP_HC_W_T_M_LT_RL * RevHP_CC.RevHP_HC_W_T_M_MT_RL + -8.304799999999999e-05 * RevHP_CC.RevHP_HC_W_T_M_LT_RL ^ 2.0 + 0.000671146 * RevHP_CC.RevHP_HC_W_T_M_MT_RL ^ 2.0);
  RevHP_CC.RevHP_HC_W_PT_M_MT__ = RevHP_CC.RevHP_HC_E_PE_M___ + RevHP_CC.RevHP_HC_W_PT_M_LT__;
  RevHP_CC.RevHP_HC_W_T_M_LT_FL_K = RevHP_CC.RevHP_HC_W_T_M_LT_RL_K + -0.2392344497607656 * RevHP_CC.RevHP_HC_W_PT_M_LT__ / RevHP_CC.m_dot_LT_FL_Set;
  RevHP_CC.RevHP_HC_W_T_M_MT_FL_K = RevHP_CC.RevHP_HC_W_T_M_MT_RL_K + 0.2392344497607656 * RevHP_CC.RevHP_HC_W_PT_M_MT__ / RevHP_CC.m_dot_MT_FL_Set;
  Load_C.LOAD_HC_W_T_M__FL_ = Load_C.LOAD_In.T;
  Load_C.LOAD_HC_W_T_M__RL_ = Load_C.LOAD_Out.T;
  Load_C.m_dot_LOAD = Load_C.LOAD_Out.m_dot;
  Load_C.m_dot_LOAD = 0.2761951388888889 * Load_C.LOAD_HC_W_VF_M___;
  Load_C.m_dot_CC = 0.2761951388888889 * Load_C.v_dot_CC;
  Load_C.LOAD_HC_W_T_M__FL__K = 273.15 + Load_C.LOAD_HC_W_T_M__FL_;
  Load_C.T_CC_RL_K = 273.15 + Load_C.T_CC_RL;
  Load_C.LOAD_HC_W_T_M__RL_ = Load_C.T_CC_RL "Temp coming back from CC is the one going back to the Tank";
  Load_C.Pth_CC = 4.18 * Load_C.m_dot_CC * (Load_C.T_CC_RL - Load_C.T_CC_FL) "Temperature are other way round since it is cooling";
  Load_C.Pth_CC = 4.18 * Load_C.m_dot_LOAD * (Load_C.T_CC_RL_K - Load_C.LOAD_HC_W_T_M__FL__K) "Temperatures switched for cooling";
  Ambient.Amb_Temp.T = Ambient.T_amb;
  HTES_Loop.T_ini = {HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set, HTES_Loop.T_ini_set};
  HTES_Loop.T_HTES_CHP_In = HTES_Loop.HTES_CHP_In.T "Temperature coming from the CHP [°C]";
  HTES_Loop.T_HTES_RevHP_In = HTES_Loop.HTES_HX_In.T "Temperature coming from the RevHP [°C]";
  HTES_Loop.m_dot_CHP = HTES_Loop.HTES_CHP_In.m_dot "Mass flow coming from the CHP(Top Layer)";
  HTES_Loop.m_dot_RevHP_HT = HTES_Loop.HTES_HX_Out.m_dot "Mass flow coming from the RevHP(Top Layer)";
  HTES_Loop.HTES_H_W_T_M_IT[10] = HTES_Loop.HTES_CHP_Out.T "Return Temperature that goes to the CHP [°C]";
  HTES_Loop.HTES_H_W_T_M_IT[10] = HTES_Loop.HTES_HX_Out.T "Return Temperature that goes to the RevHP[°C]";
  HTES_Loop.HTES_H_W_T_M_IT[60] = HTES_Loop.HTES_LOAD_Out.T "Temperature that goes to the Load[°C]";
  HTES_Loop.m_dot_LOAD = HTES_Loop.HTES_LOAD_In.m_dot "Mass flow entering from the LOAD [kg/s]";
  HTES_Loop.T_HTES_LOAD_RL = HTES_Loop.HTES_LOAD_In.T "Temperature coming back from the LOAD [°C]";
  HTES_Loop.HTES_H_W_T_M_IT[80] = HTES_Loop.HTES_AdCM_Out.T "Temperature that goes to the AdCM[°C]";
  HTES_Loop.m_dot_AdCM_HT = HTES_Loop.HTES_AdCM_In.m_dot "Mass flow entering from the AdCM [kg/s]";
  HTES_Loop.T_HTES_AdCM_RL = HTES_Loop.HTES_AdCM_In.T "Temperature coming back from the AdCM [°C]";
  HTES_Loop.DobleTempOut.T1 = HTES_Loop.HTES_H_W_T_M_IT[60] "Layer of the tank which controls the Hysteresis OFF";
  HTES_Loop.DobleTempOut.T2 = HTES_Loop.HTES_H_W_T_M_IT[10] "Layer of the tank which controls the Hysteresis ON";
  HTES_Loop.T_HTES_CHP_In_K = 273.15 + HTES_Loop.T_HTES_CHP_In;
  HTES_Loop.T_HTES_RevHP_In_K = 273.15 + HTES_Loop.T_HTES_RevHP_In;
  HTES_Loop.T_amb_K = 273.15 + HTES_Loop.T_amb.T;
  HTES_Loop.T_HTES_LOAD_RL_K = 273.15 + HTES_Loop.T_HTES_LOAD_RL;
  HTES_Loop.T_HTES_AdCM_RL_K = 273.15 + HTES_Loop.T_HTES_AdCM_RL;
  HTES_Loop.HTES_H_W_T_M_IT_K[1] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[1];
  HTES_Loop.HTES_H_W_T_M_IT_K[2] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[2];
  HTES_Loop.HTES_H_W_T_M_IT_K[3] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[3];
  HTES_Loop.HTES_H_W_T_M_IT_K[4] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[4];
  HTES_Loop.HTES_H_W_T_M_IT_K[5] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[5];
  HTES_Loop.HTES_H_W_T_M_IT_K[6] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[6];
  HTES_Loop.HTES_H_W_T_M_IT_K[7] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[7];
  HTES_Loop.HTES_H_W_T_M_IT_K[8] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[8];
  HTES_Loop.HTES_H_W_T_M_IT_K[9] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[9];
  HTES_Loop.HTES_H_W_T_M_IT_K[10] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[10];
  HTES_Loop.HTES_H_W_T_M_IT_K[11] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[11];
  HTES_Loop.HTES_H_W_T_M_IT_K[12] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[12];
  HTES_Loop.HTES_H_W_T_M_IT_K[13] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[13];
  HTES_Loop.HTES_H_W_T_M_IT_K[14] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[14];
  HTES_Loop.HTES_H_W_T_M_IT_K[15] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[15];
  HTES_Loop.HTES_H_W_T_M_IT_K[16] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[16];
  HTES_Loop.HTES_H_W_T_M_IT_K[17] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[17];
  HTES_Loop.HTES_H_W_T_M_IT_K[18] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[18];
  HTES_Loop.HTES_H_W_T_M_IT_K[19] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[19];
  HTES_Loop.HTES_H_W_T_M_IT_K[20] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[20];
  HTES_Loop.HTES_H_W_T_M_IT_K[21] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[21];
  HTES_Loop.HTES_H_W_T_M_IT_K[22] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[22];
  HTES_Loop.HTES_H_W_T_M_IT_K[23] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[23];
  HTES_Loop.HTES_H_W_T_M_IT_K[24] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[24];
  HTES_Loop.HTES_H_W_T_M_IT_K[25] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[25];
  HTES_Loop.HTES_H_W_T_M_IT_K[26] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[26];
  HTES_Loop.HTES_H_W_T_M_IT_K[27] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[27];
  HTES_Loop.HTES_H_W_T_M_IT_K[28] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[28];
  HTES_Loop.HTES_H_W_T_M_IT_K[29] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[29];
  HTES_Loop.HTES_H_W_T_M_IT_K[30] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[30];
  HTES_Loop.HTES_H_W_T_M_IT_K[31] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[31];
  HTES_Loop.HTES_H_W_T_M_IT_K[32] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[32];
  HTES_Loop.HTES_H_W_T_M_IT_K[33] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[33];
  HTES_Loop.HTES_H_W_T_M_IT_K[34] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[34];
  HTES_Loop.HTES_H_W_T_M_IT_K[35] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[35];
  HTES_Loop.HTES_H_W_T_M_IT_K[36] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[36];
  HTES_Loop.HTES_H_W_T_M_IT_K[37] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[37];
  HTES_Loop.HTES_H_W_T_M_IT_K[38] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[38];
  HTES_Loop.HTES_H_W_T_M_IT_K[39] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[39];
  HTES_Loop.HTES_H_W_T_M_IT_K[40] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[40];
  HTES_Loop.HTES_H_W_T_M_IT_K[41] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[41];
  HTES_Loop.HTES_H_W_T_M_IT_K[42] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[42];
  HTES_Loop.HTES_H_W_T_M_IT_K[43] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[43];
  HTES_Loop.HTES_H_W_T_M_IT_K[44] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[44];
  HTES_Loop.HTES_H_W_T_M_IT_K[45] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[45];
  HTES_Loop.HTES_H_W_T_M_IT_K[46] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[46];
  HTES_Loop.HTES_H_W_T_M_IT_K[47] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[47];
  HTES_Loop.HTES_H_W_T_M_IT_K[48] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[48];
  HTES_Loop.HTES_H_W_T_M_IT_K[49] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[49];
  HTES_Loop.HTES_H_W_T_M_IT_K[50] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[50];
  HTES_Loop.HTES_H_W_T_M_IT_K[51] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[51];
  HTES_Loop.HTES_H_W_T_M_IT_K[52] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[52];
  HTES_Loop.HTES_H_W_T_M_IT_K[53] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[53];
  HTES_Loop.HTES_H_W_T_M_IT_K[54] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[54];
  HTES_Loop.HTES_H_W_T_M_IT_K[55] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[55];
  HTES_Loop.HTES_H_W_T_M_IT_K[56] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[56];
  HTES_Loop.HTES_H_W_T_M_IT_K[57] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[57];
  HTES_Loop.HTES_H_W_T_M_IT_K[58] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[58];
  HTES_Loop.HTES_H_W_T_M_IT_K[59] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[59];
  HTES_Loop.HTES_H_W_T_M_IT_K[60] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[60];
  HTES_Loop.HTES_H_W_T_M_IT_K[61] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[61];
  HTES_Loop.HTES_H_W_T_M_IT_K[62] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[62];
  HTES_Loop.HTES_H_W_T_M_IT_K[63] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[63];
  HTES_Loop.HTES_H_W_T_M_IT_K[64] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[64];
  HTES_Loop.HTES_H_W_T_M_IT_K[65] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[65];
  HTES_Loop.HTES_H_W_T_M_IT_K[66] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[66];
  HTES_Loop.HTES_H_W_T_M_IT_K[67] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[67];
  HTES_Loop.HTES_H_W_T_M_IT_K[68] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[68];
  HTES_Loop.HTES_H_W_T_M_IT_K[69] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[69];
  HTES_Loop.HTES_H_W_T_M_IT_K[70] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[70];
  HTES_Loop.HTES_H_W_T_M_IT_K[71] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[71];
  HTES_Loop.HTES_H_W_T_M_IT_K[72] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[72];
  HTES_Loop.HTES_H_W_T_M_IT_K[73] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[73];
  HTES_Loop.HTES_H_W_T_M_IT_K[74] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[74];
  HTES_Loop.HTES_H_W_T_M_IT_K[75] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[75];
  HTES_Loop.HTES_H_W_T_M_IT_K[76] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[76];
  HTES_Loop.HTES_H_W_T_M_IT_K[77] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[77];
  HTES_Loop.HTES_H_W_T_M_IT_K[78] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[78];
  HTES_Loop.HTES_H_W_T_M_IT_K[79] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[79];
  HTES_Loop.HTES_H_W_T_M_IT_K[80] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[80];
  HTES_Loop.HTES_H_W_T_M_IT_K[81] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[81];
  HTES_Loop.HTES_H_W_T_M_IT_K[82] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[82];
  HTES_Loop.HTES_H_W_T_M_IT_K[83] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[83];
  HTES_Loop.HTES_H_W_T_M_IT_K[84] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[84];
  HTES_Loop.HTES_H_W_T_M_IT_K[85] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[85];
  HTES_Loop.HTES_H_W_T_M_IT_K[86] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[86];
  HTES_Loop.HTES_H_W_T_M_IT_K[87] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[87];
  HTES_Loop.HTES_H_W_T_M_IT_K[88] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[88];
  HTES_Loop.HTES_H_W_T_M_IT_K[89] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[89];
  HTES_Loop.HTES_H_W_T_M_IT_K[90] = 273.15 + HTES_Loop.HTES_H_W_T_M_IT[90];
  HTES_Loop.T_ini_K[1] = 273.15 + HTES_Loop.T_ini[1];
  HTES_Loop.T_ini_K[2] = 273.15 + HTES_Loop.T_ini[2];
  HTES_Loop.T_ini_K[3] = 273.15 + HTES_Loop.T_ini[3];
  HTES_Loop.T_ini_K[4] = 273.15 + HTES_Loop.T_ini[4];
  HTES_Loop.T_ini_K[5] = 273.15 + HTES_Loop.T_ini[5];
  HTES_Loop.T_ini_K[6] = 273.15 + HTES_Loop.T_ini[6];
  HTES_Loop.T_ini_K[7] = 273.15 + HTES_Loop.T_ini[7];
  HTES_Loop.T_ini_K[8] = 273.15 + HTES_Loop.T_ini[8];
  HTES_Loop.T_ini_K[9] = 273.15 + HTES_Loop.T_ini[9];
  HTES_Loop.T_ini_K[10] = 273.15 + HTES_Loop.T_ini[10];
  HTES_Loop.T_ini_K[11] = 273.15 + HTES_Loop.T_ini[11];
  HTES_Loop.T_ini_K[12] = 273.15 + HTES_Loop.T_ini[12];
  HTES_Loop.T_ini_K[13] = 273.15 + HTES_Loop.T_ini[13];
  HTES_Loop.T_ini_K[14] = 273.15 + HTES_Loop.T_ini[14];
  HTES_Loop.T_ini_K[15] = 273.15 + HTES_Loop.T_ini[15];
  HTES_Loop.T_ini_K[16] = 273.15 + HTES_Loop.T_ini[16];
  HTES_Loop.T_ini_K[17] = 273.15 + HTES_Loop.T_ini[17];
  HTES_Loop.T_ini_K[18] = 273.15 + HTES_Loop.T_ini[18];
  HTES_Loop.T_ini_K[19] = 273.15 + HTES_Loop.T_ini[19];
  HTES_Loop.T_ini_K[20] = 273.15 + HTES_Loop.T_ini[20];
  HTES_Loop.T_ini_K[21] = 273.15 + HTES_Loop.T_ini[21];
  HTES_Loop.T_ini_K[22] = 273.15 + HTES_Loop.T_ini[22];
  HTES_Loop.T_ini_K[23] = 273.15 + HTES_Loop.T_ini[23];
  HTES_Loop.T_ini_K[24] = 273.15 + HTES_Loop.T_ini[24];
  HTES_Loop.T_ini_K[25] = 273.15 + HTES_Loop.T_ini[25];
  HTES_Loop.T_ini_K[26] = 273.15 + HTES_Loop.T_ini[26];
  HTES_Loop.T_ini_K[27] = 273.15 + HTES_Loop.T_ini[27];
  HTES_Loop.T_ini_K[28] = 273.15 + HTES_Loop.T_ini[28];
  HTES_Loop.T_ini_K[29] = 273.15 + HTES_Loop.T_ini[29];
  HTES_Loop.T_ini_K[30] = 273.15 + HTES_Loop.T_ini[30];
  HTES_Loop.T_ini_K[31] = 273.15 + HTES_Loop.T_ini[31];
  HTES_Loop.T_ini_K[32] = 273.15 + HTES_Loop.T_ini[32];
  HTES_Loop.T_ini_K[33] = 273.15 + HTES_Loop.T_ini[33];
  HTES_Loop.T_ini_K[34] = 273.15 + HTES_Loop.T_ini[34];
  HTES_Loop.T_ini_K[35] = 273.15 + HTES_Loop.T_ini[35];
  HTES_Loop.T_ini_K[36] = 273.15 + HTES_Loop.T_ini[36];
  HTES_Loop.T_ini_K[37] = 273.15 + HTES_Loop.T_ini[37];
  HTES_Loop.T_ini_K[38] = 273.15 + HTES_Loop.T_ini[38];
  HTES_Loop.T_ini_K[39] = 273.15 + HTES_Loop.T_ini[39];
  HTES_Loop.T_ini_K[40] = 273.15 + HTES_Loop.T_ini[40];
  HTES_Loop.T_ini_K[41] = 273.15 + HTES_Loop.T_ini[41];
  HTES_Loop.T_ini_K[42] = 273.15 + HTES_Loop.T_ini[42];
  HTES_Loop.T_ini_K[43] = 273.15 + HTES_Loop.T_ini[43];
  HTES_Loop.T_ini_K[44] = 273.15 + HTES_Loop.T_ini[44];
  HTES_Loop.T_ini_K[45] = 273.15 + HTES_Loop.T_ini[45];
  HTES_Loop.T_ini_K[46] = 273.15 + HTES_Loop.T_ini[46];
  HTES_Loop.T_ini_K[47] = 273.15 + HTES_Loop.T_ini[47];
  HTES_Loop.T_ini_K[48] = 273.15 + HTES_Loop.T_ini[48];
  HTES_Loop.T_ini_K[49] = 273.15 + HTES_Loop.T_ini[49];
  HTES_Loop.T_ini_K[50] = 273.15 + HTES_Loop.T_ini[50];
  HTES_Loop.T_ini_K[51] = 273.15 + HTES_Loop.T_ini[51];
  HTES_Loop.T_ini_K[52] = 273.15 + HTES_Loop.T_ini[52];
  HTES_Loop.T_ini_K[53] = 273.15 + HTES_Loop.T_ini[53];
  HTES_Loop.T_ini_K[54] = 273.15 + HTES_Loop.T_ini[54];
  HTES_Loop.T_ini_K[55] = 273.15 + HTES_Loop.T_ini[55];
  HTES_Loop.T_ini_K[56] = 273.15 + HTES_Loop.T_ini[56];
  HTES_Loop.T_ini_K[57] = 273.15 + HTES_Loop.T_ini[57];
  HTES_Loop.T_ini_K[58] = 273.15 + HTES_Loop.T_ini[58];
  HTES_Loop.T_ini_K[59] = 273.15 + HTES_Loop.T_ini[59];
  HTES_Loop.T_ini_K[60] = 273.15 + HTES_Loop.T_ini[60];
  HTES_Loop.T_ini_K[61] = 273.15 + HTES_Loop.T_ini[61];
  HTES_Loop.T_ini_K[62] = 273.15 + HTES_Loop.T_ini[62];
  HTES_Loop.T_ini_K[63] = 273.15 + HTES_Loop.T_ini[63];
  HTES_Loop.T_ini_K[64] = 273.15 + HTES_Loop.T_ini[64];
  HTES_Loop.T_ini_K[65] = 273.15 + HTES_Loop.T_ini[65];
  HTES_Loop.T_ini_K[66] = 273.15 + HTES_Loop.T_ini[66];
  HTES_Loop.T_ini_K[67] = 273.15 + HTES_Loop.T_ini[67];
  HTES_Loop.T_ini_K[68] = 273.15 + HTES_Loop.T_ini[68];
  HTES_Loop.T_ini_K[69] = 273.15 + HTES_Loop.T_ini[69];
  HTES_Loop.T_ini_K[70] = 273.15 + HTES_Loop.T_ini[70];
  HTES_Loop.T_ini_K[71] = 273.15 + HTES_Loop.T_ini[71];
  HTES_Loop.T_ini_K[72] = 273.15 + HTES_Loop.T_ini[72];
  HTES_Loop.T_ini_K[73] = 273.15 + HTES_Loop.T_ini[73];
  HTES_Loop.T_ini_K[74] = 273.15 + HTES_Loop.T_ini[74];
  HTES_Loop.T_ini_K[75] = 273.15 + HTES_Loop.T_ini[75];
  HTES_Loop.T_ini_K[76] = 273.15 + HTES_Loop.T_ini[76];
  HTES_Loop.T_ini_K[77] = 273.15 + HTES_Loop.T_ini[77];
  HTES_Loop.T_ini_K[78] = 273.15 + HTES_Loop.T_ini[78];
  HTES_Loop.T_ini_K[79] = 273.15 + HTES_Loop.T_ini[79];
  HTES_Loop.T_ini_K[80] = 273.15 + HTES_Loop.T_ini[80];
  HTES_Loop.T_ini_K[81] = 273.15 + HTES_Loop.T_ini[81];
  HTES_Loop.T_ini_K[82] = 273.15 + HTES_Loop.T_ini[82];
  HTES_Loop.T_ini_K[83] = 273.15 + HTES_Loop.T_ini[83];
  HTES_Loop.T_ini_K[84] = 273.15 + HTES_Loop.T_ini[84];
  HTES_Loop.T_ini_K[85] = 273.15 + HTES_Loop.T_ini[85];
  HTES_Loop.T_ini_K[86] = 273.15 + HTES_Loop.T_ini[86];
  HTES_Loop.T_ini_K[87] = 273.15 + HTES_Loop.T_ini[87];
  HTES_Loop.T_ini_K[88] = 273.15 + HTES_Loop.T_ini[88];
  HTES_Loop.T_ini_K[89] = 273.15 + HTES_Loop.T_ini[89];
  HTES_Loop.T_ini_K[90] = 273.15 + HTES_Loop.T_ini[90];
  HTES_Loop.zi = HTES_Loop.h / /*Real*/(HTES_Loop.n);
  HTES_Loop.mi = 3123.693429445962 * (0.5 * HTES_Loop.D) ^ 2.0 * HTES_Loop.zi;
  HTES_Loop.di = HTES_Loop.D + -2.0 * HTES_Loop.t;
  HTES_Loop.Aamb = 3.14159265358979 * HTES_Loop.D * HTES_Loop.zi;
  HTES_Loop.Alayer = 0.7853981633974475 * HTES_Loop.di ^ 2.0;
  if HTES_Loop.v_HT == 0.0 then
    HTES_Loop.v_dot_RevHP_HT = 0.0;
  else
    HTES_Loop.v_dot_RevHP_HT = HTES_Loop.v_dot_RevHP_HT_Set;
  end if;
  HTES_Loop.m_dot_RevHP_HT = 0.2761951388888889 * HTES_Loop.v_dot_RevHP_HT;
  HTES_Loop.Coil_ON_int = if HTES_Loop.heat then HTES_Loop.Coil_ON else 0.0;
  if HTES_Loop.Coil_ON_int == 0.0 then
    HTES_Loop.COIL_H_E_PT_M__ = 0.0;
  else
    HTES_Loop.COIL_H_E_PT_M__ = HTES_Loop.P_COIL_Set;
  end if;
  HTES_Loop.m_dot[1] = 0.0 "Effective mass flow in the bottom most layer";
  HTES_Loop.m_dot[90] = 0.0 "Effective mass flow in the top most layer is 0";
  HTES_Loop.m_dot[2] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[3] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[4] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[5] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[6] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[7] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[8] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[9] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[10] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[11] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[12] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[13] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[14] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[15] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[16] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[17] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[18] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[19] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[20] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[21] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[22] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[23] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[24] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[25] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[26] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[27] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[28] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[29] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[30] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[31] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[32] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[33] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[34] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[35] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[36] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[37] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[38] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[39] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[40] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[41] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[42] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[43] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[44] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[45] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[46] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[47] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[48] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[49] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[50] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[51] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[52] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[53] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[54] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[55] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[56] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[57] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[58] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[59] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[60] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[61] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[62] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[63] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[64] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[65] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[66] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[67] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[68] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[69] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[70] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[71] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[72] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[73] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[74] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[75] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[76] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[77] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[78] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[79] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[80] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[81] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[82] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[83] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[84] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[85] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[86] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[87] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[88] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  HTES_Loop.m_dot[89] = HTES_Loop.m_dot_CHP + HTES_Loop.m_dot_RevHP_HT + (-HTES_Loop.m_dot_AdCM_HT) - HTES_Loop.m_dot_LOAD "effective mass flow for ith layer";
  if HTES_Loop.m_dot[89] > 0.0 then
    HTES_Loop.d_pos = 1.0;
    HTES_Loop.d_neg = 0.0;
  else
    HTES_Loop.d_pos = 0.0;
    HTES_Loop.d_neg = 1.0;
  end if;
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[1]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[2] - HTES_Loop.HTES_H_W_T_M_IT_K[1]) / HTES_Loop.zi + 4.18 * (HTES_Loop.m_dot_LOAD * (HTES_Loop.T_HTES_LOAD_RL_K - HTES_Loop.HTES_H_W_T_M_IT_K[1]) + HTES_Loop.m_dot_AdCM_HT * (HTES_Loop.T_HTES_AdCM_RL_K - HTES_Loop.HTES_H_W_T_M_IT_K[1]) + HTES_Loop.d_pos * HTES_Loop.m_dot[2] * (HTES_Loop.HTES_H_W_T_M_IT_K[2] - HTES_Loop.HTES_H_W_T_M_IT_K[1])) + -20.0 * HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[1] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[2]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[1] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[2] + HTES_Loop.HTES_H_W_T_M_IT_K[3]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[2] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[3] - HTES_Loop.HTES_H_W_T_M_IT_K[2]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[2] - HTES_Loop.HTES_H_W_T_M_IT_K[1])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[2] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[3]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[2] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[3] + HTES_Loop.HTES_H_W_T_M_IT_K[4]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[3] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[4] - HTES_Loop.HTES_H_W_T_M_IT_K[3]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[3] - HTES_Loop.HTES_H_W_T_M_IT_K[2])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[3] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[4]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[3] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[4] + HTES_Loop.HTES_H_W_T_M_IT_K[5]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[4] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[5] - HTES_Loop.HTES_H_W_T_M_IT_K[4]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[4] - HTES_Loop.HTES_H_W_T_M_IT_K[3])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[4] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[5]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[4] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[5] + HTES_Loop.HTES_H_W_T_M_IT_K[6]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[5] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[6] - HTES_Loop.HTES_H_W_T_M_IT_K[5]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[5] - HTES_Loop.HTES_H_W_T_M_IT_K[4])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[5] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[6]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[5] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[6] + HTES_Loop.HTES_H_W_T_M_IT_K[7]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[6] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[7] - HTES_Loop.HTES_H_W_T_M_IT_K[6]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[6] - HTES_Loop.HTES_H_W_T_M_IT_K[5])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[6] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[7]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[6] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[7] + HTES_Loop.HTES_H_W_T_M_IT_K[8]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[7] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[8] - HTES_Loop.HTES_H_W_T_M_IT_K[7]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[7] - HTES_Loop.HTES_H_W_T_M_IT_K[6])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[7] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[8]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[7] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[8] + HTES_Loop.HTES_H_W_T_M_IT_K[9]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[8] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[9] - HTES_Loop.HTES_H_W_T_M_IT_K[8]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[8] - HTES_Loop.HTES_H_W_T_M_IT_K[7])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[8] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[9]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[8] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[9] + HTES_Loop.HTES_H_W_T_M_IT_K[10]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[9] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[10] - HTES_Loop.HTES_H_W_T_M_IT_K[9]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[9] - HTES_Loop.HTES_H_W_T_M_IT_K[8])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[9] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[10]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[9] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[10] + HTES_Loop.HTES_H_W_T_M_IT_K[11]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[10] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[11] - HTES_Loop.HTES_H_W_T_M_IT_K[10]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[10] - HTES_Loop.HTES_H_W_T_M_IT_K[9])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[10] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[11]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[10] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[11] + HTES_Loop.HTES_H_W_T_M_IT_K[12]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[11] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[12] - HTES_Loop.HTES_H_W_T_M_IT_K[11]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[11] - HTES_Loop.HTES_H_W_T_M_IT_K[10])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[11] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[12]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[11] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[12] + HTES_Loop.HTES_H_W_T_M_IT_K[13]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[12] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[13] - HTES_Loop.HTES_H_W_T_M_IT_K[12]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[12] - HTES_Loop.HTES_H_W_T_M_IT_K[11])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[12] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[13]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[12] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[13] + HTES_Loop.HTES_H_W_T_M_IT_K[14]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[13] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[14] - HTES_Loop.HTES_H_W_T_M_IT_K[13]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[13] - HTES_Loop.HTES_H_W_T_M_IT_K[12])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[13] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[14]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[13] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[14] + HTES_Loop.HTES_H_W_T_M_IT_K[15]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[14] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[15] - HTES_Loop.HTES_H_W_T_M_IT_K[14]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[14] - HTES_Loop.HTES_H_W_T_M_IT_K[13])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[14] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[15]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[14] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[15] + HTES_Loop.HTES_H_W_T_M_IT_K[16]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[15] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[16] - HTES_Loop.HTES_H_W_T_M_IT_K[15]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[15] - HTES_Loop.HTES_H_W_T_M_IT_K[14])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[15] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[16]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[15] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[16] + HTES_Loop.HTES_H_W_T_M_IT_K[17]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[16] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[17] - HTES_Loop.HTES_H_W_T_M_IT_K[16]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[16] - HTES_Loop.HTES_H_W_T_M_IT_K[15])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[16] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[17]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[16] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[17] + HTES_Loop.HTES_H_W_T_M_IT_K[18]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[17] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[18] - HTES_Loop.HTES_H_W_T_M_IT_K[17]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[17] - HTES_Loop.HTES_H_W_T_M_IT_K[16])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[17] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[18]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[17] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[18] + HTES_Loop.HTES_H_W_T_M_IT_K[19]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[18] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[19] - HTES_Loop.HTES_H_W_T_M_IT_K[18]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[18] - HTES_Loop.HTES_H_W_T_M_IT_K[17])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[18] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[19]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[18] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[19] + HTES_Loop.HTES_H_W_T_M_IT_K[20]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[19] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[20] - HTES_Loop.HTES_H_W_T_M_IT_K[19]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[19] - HTES_Loop.HTES_H_W_T_M_IT_K[18])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[19] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[20]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[19] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[20] + HTES_Loop.HTES_H_W_T_M_IT_K[21]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[20] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[21] - HTES_Loop.HTES_H_W_T_M_IT_K[20]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[20] - HTES_Loop.HTES_H_W_T_M_IT_K[19])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[20] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[21]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[20] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[21] + HTES_Loop.HTES_H_W_T_M_IT_K[22]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[21] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[22] - HTES_Loop.HTES_H_W_T_M_IT_K[21]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[21] - HTES_Loop.HTES_H_W_T_M_IT_K[20])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[21] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[22]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[21] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[22] + HTES_Loop.HTES_H_W_T_M_IT_K[23]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[22] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[23] - HTES_Loop.HTES_H_W_T_M_IT_K[22]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[22] - HTES_Loop.HTES_H_W_T_M_IT_K[21])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[22] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[23]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[22] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[23] + HTES_Loop.HTES_H_W_T_M_IT_K[24]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[23] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[24] - HTES_Loop.HTES_H_W_T_M_IT_K[23]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[23] - HTES_Loop.HTES_H_W_T_M_IT_K[22])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[23] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[24]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[23] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[24] + HTES_Loop.HTES_H_W_T_M_IT_K[25]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[24] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[25] - HTES_Loop.HTES_H_W_T_M_IT_K[24]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[24] - HTES_Loop.HTES_H_W_T_M_IT_K[23])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[24] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[25]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[24] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[25] + HTES_Loop.HTES_H_W_T_M_IT_K[26]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[25] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[26] - HTES_Loop.HTES_H_W_T_M_IT_K[25]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[25] - HTES_Loop.HTES_H_W_T_M_IT_K[24])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[25] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[26]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[25] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[26] + HTES_Loop.HTES_H_W_T_M_IT_K[27]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[26] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[27] - HTES_Loop.HTES_H_W_T_M_IT_K[26]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[26] - HTES_Loop.HTES_H_W_T_M_IT_K[25])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[26] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[27]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[26] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[27] + HTES_Loop.HTES_H_W_T_M_IT_K[28]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[27] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[28] - HTES_Loop.HTES_H_W_T_M_IT_K[27]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[27] - HTES_Loop.HTES_H_W_T_M_IT_K[26])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[27] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[28]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[27] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[28] + HTES_Loop.HTES_H_W_T_M_IT_K[29]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[28] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[29] - HTES_Loop.HTES_H_W_T_M_IT_K[28]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[28] - HTES_Loop.HTES_H_W_T_M_IT_K[27])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[28] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[29]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[28] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[29] + HTES_Loop.HTES_H_W_T_M_IT_K[30]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[29] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[30] - HTES_Loop.HTES_H_W_T_M_IT_K[29]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[29] - HTES_Loop.HTES_H_W_T_M_IT_K[28])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[29] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[30]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[29] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[30] + HTES_Loop.HTES_H_W_T_M_IT_K[31]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[30] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[31] - HTES_Loop.HTES_H_W_T_M_IT_K[30]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[30] - HTES_Loop.HTES_H_W_T_M_IT_K[29])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[30] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[31]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[30] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[31] + HTES_Loop.HTES_H_W_T_M_IT_K[32]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[31] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[32] - HTES_Loop.HTES_H_W_T_M_IT_K[31]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[31] - HTES_Loop.HTES_H_W_T_M_IT_K[30])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[31] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[32]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[31] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[32] + HTES_Loop.HTES_H_W_T_M_IT_K[33]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[32] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[33] - HTES_Loop.HTES_H_W_T_M_IT_K[32]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[32] - HTES_Loop.HTES_H_W_T_M_IT_K[31])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[32] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[33]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[32] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[33] + HTES_Loop.HTES_H_W_T_M_IT_K[34]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[33] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[34] - HTES_Loop.HTES_H_W_T_M_IT_K[33]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[33] - HTES_Loop.HTES_H_W_T_M_IT_K[32])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[33] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[34]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[33] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[34] + HTES_Loop.HTES_H_W_T_M_IT_K[35]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[34] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[35] - HTES_Loop.HTES_H_W_T_M_IT_K[34]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[34] - HTES_Loop.HTES_H_W_T_M_IT_K[33])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[34] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[35]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[34] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[35] + HTES_Loop.HTES_H_W_T_M_IT_K[36]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[35] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[36] - HTES_Loop.HTES_H_W_T_M_IT_K[35]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[35] - HTES_Loop.HTES_H_W_T_M_IT_K[34])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[35] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[36]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[35] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[36] + HTES_Loop.HTES_H_W_T_M_IT_K[37]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[36] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[37] - HTES_Loop.HTES_H_W_T_M_IT_K[36]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[36] - HTES_Loop.HTES_H_W_T_M_IT_K[35])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[36] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[37]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[36] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[37] + HTES_Loop.HTES_H_W_T_M_IT_K[38]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[37] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[38] - HTES_Loop.HTES_H_W_T_M_IT_K[37]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[37] - HTES_Loop.HTES_H_W_T_M_IT_K[36])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[37] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[38]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[37] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[38] + HTES_Loop.HTES_H_W_T_M_IT_K[39]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[38] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[39] - HTES_Loop.HTES_H_W_T_M_IT_K[38]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[38] - HTES_Loop.HTES_H_W_T_M_IT_K[37])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[38] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[39]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[38] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[39] + HTES_Loop.HTES_H_W_T_M_IT_K[40]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[39] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[40] - HTES_Loop.HTES_H_W_T_M_IT_K[39]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[39] - HTES_Loop.HTES_H_W_T_M_IT_K[38])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[39] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[40]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[39] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[40] + HTES_Loop.HTES_H_W_T_M_IT_K[41]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[40] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[41] - HTES_Loop.HTES_H_W_T_M_IT_K[40]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[40] - HTES_Loop.HTES_H_W_T_M_IT_K[39])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[40] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[41]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[40] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[41] + HTES_Loop.HTES_H_W_T_M_IT_K[42]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[41] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[42] - HTES_Loop.HTES_H_W_T_M_IT_K[41]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[41] - HTES_Loop.HTES_H_W_T_M_IT_K[40])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[41] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[42]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[41] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[42] + HTES_Loop.HTES_H_W_T_M_IT_K[43]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[42] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[43] - HTES_Loop.HTES_H_W_T_M_IT_K[42]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[42] - HTES_Loop.HTES_H_W_T_M_IT_K[41])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[42] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[43]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[42] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[43] + HTES_Loop.HTES_H_W_T_M_IT_K[44]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[43] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[44] - HTES_Loop.HTES_H_W_T_M_IT_K[43]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[43] - HTES_Loop.HTES_H_W_T_M_IT_K[42])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[43] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[44]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[43] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[44] + HTES_Loop.HTES_H_W_T_M_IT_K[45]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[44] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[45] - HTES_Loop.HTES_H_W_T_M_IT_K[44]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[44] - HTES_Loop.HTES_H_W_T_M_IT_K[43])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[44] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[45]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[44] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[45] + HTES_Loop.HTES_H_W_T_M_IT_K[46]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[45] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[46] - HTES_Loop.HTES_H_W_T_M_IT_K[45]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[45] - HTES_Loop.HTES_H_W_T_M_IT_K[44])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[45] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[46]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[45] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[46] + HTES_Loop.HTES_H_W_T_M_IT_K[47]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[46] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[47] - HTES_Loop.HTES_H_W_T_M_IT_K[46]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[46] - HTES_Loop.HTES_H_W_T_M_IT_K[45])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[46] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[47]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[46] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[47] + HTES_Loop.HTES_H_W_T_M_IT_K[48]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[47] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[48] - HTES_Loop.HTES_H_W_T_M_IT_K[47]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[47] - HTES_Loop.HTES_H_W_T_M_IT_K[46])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[47] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[48]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[47] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[48] + HTES_Loop.HTES_H_W_T_M_IT_K[49]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[48] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[49] - HTES_Loop.HTES_H_W_T_M_IT_K[48]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[48] - HTES_Loop.HTES_H_W_T_M_IT_K[47])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[48] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[49]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[48] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[49] + HTES_Loop.HTES_H_W_T_M_IT_K[50]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[49] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[50] - HTES_Loop.HTES_H_W_T_M_IT_K[49]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[49] - HTES_Loop.HTES_H_W_T_M_IT_K[48])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[49] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[50]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[49] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[50] + HTES_Loop.HTES_H_W_T_M_IT_K[51]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[50] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[51] - HTES_Loop.HTES_H_W_T_M_IT_K[50]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[50] - HTES_Loop.HTES_H_W_T_M_IT_K[49])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[50] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[51]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[50] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[51] + HTES_Loop.HTES_H_W_T_M_IT_K[52]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[51] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[52] - HTES_Loop.HTES_H_W_T_M_IT_K[51]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[51] - HTES_Loop.HTES_H_W_T_M_IT_K[50])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[51] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[52]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[51] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[52] + HTES_Loop.HTES_H_W_T_M_IT_K[53]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[52] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[53] - HTES_Loop.HTES_H_W_T_M_IT_K[52]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[52] - HTES_Loop.HTES_H_W_T_M_IT_K[51])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[52] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[53]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[52] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[53] + HTES_Loop.HTES_H_W_T_M_IT_K[54]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[53] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[54] - HTES_Loop.HTES_H_W_T_M_IT_K[53]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[53] - HTES_Loop.HTES_H_W_T_M_IT_K[52])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[53] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[54]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[53] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[54] + HTES_Loop.HTES_H_W_T_M_IT_K[55]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[54] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[55] - HTES_Loop.HTES_H_W_T_M_IT_K[54]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[54] - HTES_Loop.HTES_H_W_T_M_IT_K[53])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[54] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[55]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[54] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[55] + HTES_Loop.HTES_H_W_T_M_IT_K[56]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[55] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[56] - HTES_Loop.HTES_H_W_T_M_IT_K[55]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[55] - HTES_Loop.HTES_H_W_T_M_IT_K[54])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[55] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[56]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[55] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[56] + HTES_Loop.HTES_H_W_T_M_IT_K[57]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[56] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[57] - HTES_Loop.HTES_H_W_T_M_IT_K[56]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[56] - HTES_Loop.HTES_H_W_T_M_IT_K[55])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[56] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[57]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[56] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[57] + HTES_Loop.HTES_H_W_T_M_IT_K[58]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[57] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[58] - HTES_Loop.HTES_H_W_T_M_IT_K[57]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[57] - HTES_Loop.HTES_H_W_T_M_IT_K[56])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[57] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[58]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[57] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[58] + HTES_Loop.HTES_H_W_T_M_IT_K[59]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[58] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[59] - HTES_Loop.HTES_H_W_T_M_IT_K[58]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[58] - HTES_Loop.HTES_H_W_T_M_IT_K[57])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[58] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[59]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[58] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[59] + HTES_Loop.HTES_H_W_T_M_IT_K[60]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[59] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[60] - HTES_Loop.HTES_H_W_T_M_IT_K[59]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[59] - HTES_Loop.HTES_H_W_T_M_IT_K[58])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[59] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[60]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[59] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[60] + HTES_Loop.HTES_H_W_T_M_IT_K[61]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[60] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[61] - HTES_Loop.HTES_H_W_T_M_IT_K[60]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[60] - HTES_Loop.HTES_H_W_T_M_IT_K[59])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[60] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[61]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[60] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[61] + HTES_Loop.HTES_H_W_T_M_IT_K[62]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[61] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[62] - HTES_Loop.HTES_H_W_T_M_IT_K[61]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[61] - HTES_Loop.HTES_H_W_T_M_IT_K[60])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[61] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[62]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[61] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[62] + HTES_Loop.HTES_H_W_T_M_IT_K[63]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[62] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[63] - HTES_Loop.HTES_H_W_T_M_IT_K[62]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[62] - HTES_Loop.HTES_H_W_T_M_IT_K[61])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[62] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[63]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[62] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[63] + HTES_Loop.HTES_H_W_T_M_IT_K[64]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[63] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[64] - HTES_Loop.HTES_H_W_T_M_IT_K[63]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[63] - HTES_Loop.HTES_H_W_T_M_IT_K[62])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[63] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[64]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[63] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[64] + HTES_Loop.HTES_H_W_T_M_IT_K[65]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[64] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[65] - HTES_Loop.HTES_H_W_T_M_IT_K[64]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[64] - HTES_Loop.HTES_H_W_T_M_IT_K[63])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[64] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[65]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[64] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[65] + HTES_Loop.HTES_H_W_T_M_IT_K[66]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[65] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[66] - HTES_Loop.HTES_H_W_T_M_IT_K[65]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[65] - HTES_Loop.HTES_H_W_T_M_IT_K[64])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[65] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[66]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[65] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[66] + HTES_Loop.HTES_H_W_T_M_IT_K[67]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[66] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[67] - HTES_Loop.HTES_H_W_T_M_IT_K[66]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[66] - HTES_Loop.HTES_H_W_T_M_IT_K[65])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[66] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[67]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[66] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[67] + HTES_Loop.HTES_H_W_T_M_IT_K[68]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[67] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[68] - HTES_Loop.HTES_H_W_T_M_IT_K[67]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[67] - HTES_Loop.HTES_H_W_T_M_IT_K[66])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[67] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[68]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[67] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[68] + HTES_Loop.HTES_H_W_T_M_IT_K[69]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[68] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[69] - HTES_Loop.HTES_H_W_T_M_IT_K[68]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[68] - HTES_Loop.HTES_H_W_T_M_IT_K[67])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[68] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[69]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[68] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[69] + HTES_Loop.HTES_H_W_T_M_IT_K[70]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[69] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[70] - HTES_Loop.HTES_H_W_T_M_IT_K[69]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[69] - HTES_Loop.HTES_H_W_T_M_IT_K[68])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[69] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[70]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[69] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[70] + HTES_Loop.HTES_H_W_T_M_IT_K[71]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[70] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[71] - HTES_Loop.HTES_H_W_T_M_IT_K[70]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[70] - HTES_Loop.HTES_H_W_T_M_IT_K[69])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[70] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[71]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[70] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[71] + HTES_Loop.HTES_H_W_T_M_IT_K[72]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[71] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[72] - HTES_Loop.HTES_H_W_T_M_IT_K[71]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[71] - HTES_Loop.HTES_H_W_T_M_IT_K[70])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[71] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[72]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[71] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[72] + HTES_Loop.HTES_H_W_T_M_IT_K[73]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[72] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[73] - HTES_Loop.HTES_H_W_T_M_IT_K[72]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[72] - HTES_Loop.HTES_H_W_T_M_IT_K[71])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[72] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[73]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[72] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[73] + HTES_Loop.HTES_H_W_T_M_IT_K[74]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[73] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[74] - HTES_Loop.HTES_H_W_T_M_IT_K[73]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[73] - HTES_Loop.HTES_H_W_T_M_IT_K[72])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[73] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[74]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[73] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[74] + HTES_Loop.HTES_H_W_T_M_IT_K[75]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[74] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[75] - HTES_Loop.HTES_H_W_T_M_IT_K[74]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[74] - HTES_Loop.HTES_H_W_T_M_IT_K[73])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[74] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[75]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[74] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[75] + HTES_Loop.HTES_H_W_T_M_IT_K[76]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[75] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[76] - HTES_Loop.HTES_H_W_T_M_IT_K[75]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[75] - HTES_Loop.HTES_H_W_T_M_IT_K[74])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[75] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[76]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[75] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[76] + HTES_Loop.HTES_H_W_T_M_IT_K[77]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[76] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[77] - HTES_Loop.HTES_H_W_T_M_IT_K[76]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[76] - HTES_Loop.HTES_H_W_T_M_IT_K[75])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[76] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[77]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[76] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[77] + HTES_Loop.HTES_H_W_T_M_IT_K[78]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[77] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[78] - HTES_Loop.HTES_H_W_T_M_IT_K[77]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[77] - HTES_Loop.HTES_H_W_T_M_IT_K[76])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[77] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[78]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[77] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[78] + HTES_Loop.HTES_H_W_T_M_IT_K[79]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[78] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[79] - HTES_Loop.HTES_H_W_T_M_IT_K[78]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[78] - HTES_Loop.HTES_H_W_T_M_IT_K[77])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[78] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[79]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[78] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[79] + HTES_Loop.HTES_H_W_T_M_IT_K[80]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[79] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[80] - HTES_Loop.HTES_H_W_T_M_IT_K[79]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[79] - HTES_Loop.HTES_H_W_T_M_IT_K[78])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[79] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[80]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[79] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[80] + HTES_Loop.HTES_H_W_T_M_IT_K[81]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[80] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[81] - HTES_Loop.HTES_H_W_T_M_IT_K[80]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[80] - HTES_Loop.HTES_H_W_T_M_IT_K[79])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[80] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[81]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[80] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[81] + HTES_Loop.HTES_H_W_T_M_IT_K[82]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[81] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[82] - HTES_Loop.HTES_H_W_T_M_IT_K[81]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[81] - HTES_Loop.HTES_H_W_T_M_IT_K[80])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[81] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[82]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[81] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[82] + HTES_Loop.HTES_H_W_T_M_IT_K[83]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[82] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[83] - HTES_Loop.HTES_H_W_T_M_IT_K[82]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[82] - HTES_Loop.HTES_H_W_T_M_IT_K[81])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[82] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[83]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[82] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[83] + HTES_Loop.HTES_H_W_T_M_IT_K[84]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[83] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[84] - HTES_Loop.HTES_H_W_T_M_IT_K[83]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[83] - HTES_Loop.HTES_H_W_T_M_IT_K[82])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[83] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[84]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[83] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[84] + HTES_Loop.HTES_H_W_T_M_IT_K[85]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[84] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[85] - HTES_Loop.HTES_H_W_T_M_IT_K[84]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[84] - HTES_Loop.HTES_H_W_T_M_IT_K[83])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[84] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[85]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[84] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[85] + HTES_Loop.HTES_H_W_T_M_IT_K[86]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[85] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[86] - HTES_Loop.HTES_H_W_T_M_IT_K[85]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[85] - HTES_Loop.HTES_H_W_T_M_IT_K[84])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[85] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[86]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[85] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[86] + HTES_Loop.HTES_H_W_T_M_IT_K[87]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[86] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[87] - HTES_Loop.HTES_H_W_T_M_IT_K[86]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[86] - HTES_Loop.HTES_H_W_T_M_IT_K[85])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[86] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[87]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[86] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[87] + HTES_Loop.HTES_H_W_T_M_IT_K[88]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[87] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[88] - HTES_Loop.HTES_H_W_T_M_IT_K[87]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[87] - HTES_Loop.HTES_H_W_T_M_IT_K[86])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[87] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[88]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[87] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[88] + HTES_Loop.HTES_H_W_T_M_IT_K[89]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[88] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[89] - HTES_Loop.HTES_H_W_T_M_IT_K[88]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[88] - HTES_Loop.HTES_H_W_T_M_IT_K[87])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[88] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[89]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[88] + -2.0 * HTES_Loop.HTES_H_W_T_M_IT_K[89] + HTES_Loop.HTES_H_W_T_M_IT_K[90]) / HTES_Loop.zi + 4.18 * HTES_Loop.m_dot[89] * (HTES_Loop.d_pos * (HTES_Loop.HTES_H_W_T_M_IT_K[90] - HTES_Loop.HTES_H_W_T_M_IT_K[89]) + HTES_Loop.d_neg * (HTES_Loop.HTES_H_W_T_M_IT_K[89] - HTES_Loop.HTES_H_W_T_M_IT_K[88])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[89] - HTES_Loop.T_amb_K);
  4.18 * HTES_Loop.mi * der(HTES_Loop.HTES_H_W_T_M_IT_K[90]) = HTES_Loop.Alayer * HTES_Loop.lambda_eff * (HTES_Loop.HTES_H_W_T_M_IT_K[89] - HTES_Loop.HTES_H_W_T_M_IT_K[90]) / HTES_Loop.zi + 4.18 * (HTES_Loop.m_dot_CHP * (HTES_Loop.T_HTES_CHP_In_K - HTES_Loop.HTES_H_W_T_M_IT_K[90]) + HTES_Loop.m_dot_RevHP_HT * (HTES_Loop.T_HTES_RevHP_In_K - HTES_Loop.HTES_H_W_T_M_IT_K[90]) + HTES_Loop.d_neg * HTES_Loop.m_dot[89] * (HTES_Loop.HTES_H_W_T_M_IT_K[90] - HTES_Loop.HTES_H_W_T_M_IT_K[89])) + HTES_Loop.COIL_H_E_PT_M__ / /*Real*/(HTES_Loop.n) - HTES_Loop.Aamb * HTES_Loop.kappa * (HTES_Loop.HTES_H_W_T_M_IT_K[90] - HTES_Loop.T_amb_K);
  OC_1.OC_HX_in.T = OC_1.OC_HC_B_T_M__RL;
  OC_1.OC_HX_Out.T = OC_1.OC_HC_B_T_M__FL;
  OC_1.OC_HX_Out.m_dot = OC_1.m_dot_OC;
  OC_1.OC_HC_B_T_M__FL_K = 273.15 + OC_1.OC_HC_B_T_M__FL;
  OC_1.OC_HC_B_T_M__RL_K = 273.15 + OC_1.OC_HC_B_T_M__RL;
  OC_1.T_air_out_K = 273.15 + OC_1.T_air_out;
  OC_1.m_dot_OC = 0.2888164444444444 * OC_1.v_dot_OC;
  OC_1.m_dot_air = 0.0003402777777777778 * OC_1.v_dot_air_real;
  OC_1.Chot = 3.66736 * OC_1.m_dot_OC;
  OC_1.Ccold = 1.005 * OC_1.m_dot_air;
  OC_1.Cmin = min(OC_1.Chot, OC_1.Ccold);
  OC_1.Cmax = max(OC_1.Chot, OC_1.Ccold);
  OC_1.qmax = OC_1.Cmin * (OC_1.OC_HC_B_T_M__RL - OC_1.T_amb.T);
  OC_1.q = OC_1.eff * OC_1.qmax;
  OC_1.eff = (1.0 - exp(OC_1.NTU * (OC_1.Cr - 1.0))) / (1.0 - OC_1.Cr * exp(OC_1.NTU * (OC_1.Cr - 1.0)));
  if OC_1.Cmax == 0.0 or OC_1.Cmin == 0.0 then
    OC_1.Cr = 0.0;
    OC_1.NTU = 0.0;
    OC_1.OC_HC_B_T_M__RL - OC_1.OC_HC_B_T_M__FL = 0.0;
    OC_1.T_air_out - OC_1.T_amb.T = 0.0;
  else
    OC_1.Cr = OC_1.Cmin / OC_1.Cmax;
    OC_1.NTU = OC_1.U * OC_1.A / OC_1.Cmin;
    OC_1.q = OC_1.Chot * (OC_1.OC_HC_B_T_M__RL - OC_1.OC_HC_B_T_M__FL);
    OC_1.q = OC_1.Ccold * (OC_1.T_air_out - OC_1.T_amb.T);
  end if;
  OC_1.RPM_max / OC_1.RPM_real = OC_1.Volt_max / OC_1.Volt_real;
  OC_1.Pel_max / OC_1.OC_HC_E_PE_M = (OC_1.RPM_max / OC_1.RPM_real) ^ 3.0;
  OC_1.v_dot_air_max / OC_1.v_dot_air_real = OC_1.RPM_max / OC_1.RPM_real;
  OC_2.OC_HX_in.T = OC_2.OC_HC_B_T_M__RL;
  OC_2.OC_HX_Out.T = OC_2.OC_HC_B_T_M__FL;
  OC_2.OC_HX_Out.m_dot = OC_2.m_dot_OC;
  OC_2.OC_HC_B_T_M__FL_K = 273.15 + OC_2.OC_HC_B_T_M__FL;
  OC_2.OC_HC_B_T_M__RL_K = 273.15 + OC_2.OC_HC_B_T_M__RL;
  OC_2.T_air_out_K = 273.15 + OC_2.T_air_out;
  OC_2.m_dot_OC = 0.2888164444444444 * OC_2.v_dot_OC;
  OC_2.m_dot_air = 0.0003402777777777778 * OC_2.v_dot_air_real;
  OC_2.Chot = 3.66736 * OC_2.m_dot_OC;
  OC_2.Ccold = 1.005 * OC_2.m_dot_air;
  OC_2.Cmin = min(OC_2.Chot, OC_2.Ccold);
  OC_2.Cmax = max(OC_2.Chot, OC_2.Ccold);
  OC_2.qmax = OC_2.Cmin * (OC_2.OC_HC_B_T_M__RL - OC_2.T_amb.T);
  OC_2.q = OC_2.eff * OC_2.qmax;
  OC_2.eff = (1.0 - exp(OC_2.NTU * (OC_2.Cr - 1.0))) / (1.0 - OC_2.Cr * exp(OC_2.NTU * (OC_2.Cr - 1.0)));
  if OC_2.Cmax == 0.0 or OC_2.Cmin == 0.0 then
    OC_2.Cr = 0.0;
    OC_2.NTU = 0.0;
    OC_2.OC_HC_B_T_M__RL - OC_2.OC_HC_B_T_M__FL = 0.0;
    OC_2.T_air_out - OC_2.T_amb.T = 0.0;
  else
    OC_2.Cr = OC_2.Cmin / OC_2.Cmax;
    OC_2.NTU = OC_2.U * OC_2.A / OC_2.Cmin;
    OC_2.q = OC_2.Chot * (OC_2.OC_HC_B_T_M__RL - OC_2.OC_HC_B_T_M__FL);
    OC_2.q = OC_2.Ccold * (OC_2.T_air_out - OC_2.T_amb.T);
  end if;
  OC_2.RPM_max / OC_2.RPM_real = OC_2.Volt_max / OC_2.Volt_real;
  OC_2.Pel_max / OC_2.OC_HC_E_PE_M = (OC_2.RPM_max / OC_2.RPM_real) ^ 3.0;
  OC_2.v_dot_air_max / OC_2.v_dot_air_real = OC_2.RPM_max / OC_2.RPM_real;
  OC_3_RevHP.OC_RevHP_Out.T = OC_3_RevHP.OC_HC_B_T_M__FL;
  OC_3_RevHP.OC_RevHP_In.T = OC_3_RevHP.OC_HC_B_T_M__RL;
  OC_3_RevHP.OC_RevHP_In.m_dot = OC_3_RevHP.m_dot_OC;
  OC_3_RevHP.OC_HC_B_T_M__FL_K = 273.15 + OC_3_RevHP.OC_HC_B_T_M__FL;
  OC_3_RevHP.OC_HC_B_T_M__RL_K = 273.15 + OC_3_RevHP.OC_HC_B_T_M__RL;
  OC_3_RevHP.T_air_out_K = 273.15 + OC_3_RevHP.T_air_out;
  OC_3_RevHP.m_dot_OC = 0.2888164444444444 * OC_3_RevHP.v_dot_OC;
  OC_3_RevHP.m_dot_air = 0.0003402777777777778 * OC_3_RevHP.v_dot_air_real;
  OC_3_RevHP.Chot = 4.18 * OC_3_RevHP.m_dot_OC;
  OC_3_RevHP.Ccold = 1.005 * OC_3_RevHP.m_dot_air;
  OC_3_RevHP.Cmin = min(OC_3_RevHP.Chot, OC_3_RevHP.Ccold);
  OC_3_RevHP.Cmax = max(OC_3_RevHP.Chot, OC_3_RevHP.Ccold);
  OC_3_RevHP.qmax = OC_3_RevHP.Cmin * (OC_3_RevHP.OC_HC_B_T_M__RL - OC_3_RevHP.T_amb.T);
  OC_3_RevHP.q = OC_3_RevHP.eff * OC_3_RevHP.qmax;
  OC_3_RevHP.eff = (1.0 - exp(OC_3_RevHP.NTU * (OC_3_RevHP.Cr - 1.0))) / (1.0 - OC_3_RevHP.Cr * exp(OC_3_RevHP.NTU * (OC_3_RevHP.Cr - 1.0)));
  if OC_3_RevHP.Cmin == 0.0 or OC_3_RevHP.Cmax == 0.0 then
    OC_3_RevHP.Cr = 0.0 "to avoid division by zero";
    OC_3_RevHP.NTU = 0.0 "to avoid division by zero";
  else
    OC_3_RevHP.Cr = OC_3_RevHP.Cmin / OC_3_RevHP.Cmax;
    OC_3_RevHP.NTU = OC_3_RevHP.U * OC_3_RevHP.A / OC_3_RevHP.Cmin;
  end if;
  OC_3_RevHP.q = OC_3_RevHP.Chot * (OC_3_RevHP.OC_HC_B_T_M__RL - OC_3_RevHP.OC_HC_B_T_M__FL);
  OC_3_RevHP.q = OC_3_RevHP.Ccold * (OC_3_RevHP.T_air_out - OC_3_RevHP.T_amb.T);
  if OC_3_RevHP.v_dot_OC == 0.0 then
    OC_3_RevHP.Volt_real = 0.001;
  else
    OC_3_RevHP.Volt_real = OC_3_RevHP.Volt_Input;
  end if;
  OC_3_RevHP.RPM_max / OC_3_RevHP.RPM_real = OC_3_RevHP.Volt_max / OC_3_RevHP.Volt_real;
  OC_3_RevHP.Pel_max / OC_3_RevHP.OC_HC_E_PE_M = (OC_3_RevHP.RPM_max / OC_3_RevHP.RPM_real) ^ 3.0;
  OC_3_RevHP.v_dot_air_max / OC_3_RevHP.v_dot_air_real = OC_3_RevHP.RPM_max / OC_3_RevHP.RPM_real;
  CTES_Loop.T_ini = {CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set, CTES_Loop.T_ini_set};
  CTES_Loop.T_CTES_AdCM_In = CTES_Loop.CTES_AdCM_In.T "Temperature coming from the AdCM [°C]";
  CTES_Loop.T_CTES_RevHP_In = CTES_Loop.CTES_RevHP_In.T "Temperature coming from the RevHP [°C]";
  CTES_Loop.m_dot_AdCM = CTES_Loop.CTES_AdCM_In.m_dot "Mass Flow at the entrance of the CTES (Bottom Layer) [kg/s]";
  CTES_Loop.m_dot_RevHP = CTES_Loop.CTES_RevHP_In.m_dot "Mass Flow at the entrance of the CTES (Bottom Layer) [kg/s]";
  CTES_Loop.CTES_H_W_T_M_IT[40] = CTES_Loop.CTES_AdCM_Out.T "Return Temperature that goes to the AdCM[°C]";
  CTES_Loop.CTES_H_W_T_M_IT[40] = CTES_Loop.CTES_RevHP_Out.T "Return Temperature that goes to the RevHP[°C]";
  CTES_Loop.CTES_H_W_T_M_IT[10] = CTES_Loop.CTES_LOAD_Out.T "Temperature that goes to the Load[°C]";
  CTES_Loop.m_dot_LOAD = CTES_Loop.CTES_LOAD_In.m_dot "Mass flow coming back from the LOAD [kg/s]";
  CTES_Loop.T_CTES_LOAD_RL = CTES_Loop.CTES_LOAD_In.T "Temperature coming back from the LOAD [°C]";
  CTES_Loop.CTES_H_W_T_M_IT[40] = CTES_Loop.DobleTempOut.T1;
  CTES_Loop.CTES_H_W_T_M_IT[10] = CTES_Loop.DobleTempOut.T2;
  CTES_Loop.T_CTES_AdCM_In_K = 273.15 + CTES_Loop.T_CTES_AdCM_In;
  CTES_Loop.T_CTES_RevHP_In_K = 273.15 + CTES_Loop.T_CTES_RevHP_In;
  CTES_Loop.T_amb_K = 273.15 + CTES_Loop.T_amb.T;
  CTES_Loop.T_CTES_LOAD_RL_K = 273.15 + CTES_Loop.T_CTES_LOAD_RL;
  CTES_Loop.CTES_H_W_T_M_IT_K[1] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[1];
  CTES_Loop.CTES_H_W_T_M_IT_K[2] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[2];
  CTES_Loop.CTES_H_W_T_M_IT_K[3] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[3];
  CTES_Loop.CTES_H_W_T_M_IT_K[4] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[4];
  CTES_Loop.CTES_H_W_T_M_IT_K[5] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[5];
  CTES_Loop.CTES_H_W_T_M_IT_K[6] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[6];
  CTES_Loop.CTES_H_W_T_M_IT_K[7] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[7];
  CTES_Loop.CTES_H_W_T_M_IT_K[8] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[8];
  CTES_Loop.CTES_H_W_T_M_IT_K[9] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[9];
  CTES_Loop.CTES_H_W_T_M_IT_K[10] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[10];
  CTES_Loop.CTES_H_W_T_M_IT_K[11] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[11];
  CTES_Loop.CTES_H_W_T_M_IT_K[12] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[12];
  CTES_Loop.CTES_H_W_T_M_IT_K[13] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[13];
  CTES_Loop.CTES_H_W_T_M_IT_K[14] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[14];
  CTES_Loop.CTES_H_W_T_M_IT_K[15] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[15];
  CTES_Loop.CTES_H_W_T_M_IT_K[16] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[16];
  CTES_Loop.CTES_H_W_T_M_IT_K[17] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[17];
  CTES_Loop.CTES_H_W_T_M_IT_K[18] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[18];
  CTES_Loop.CTES_H_W_T_M_IT_K[19] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[19];
  CTES_Loop.CTES_H_W_T_M_IT_K[20] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[20];
  CTES_Loop.CTES_H_W_T_M_IT_K[21] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[21];
  CTES_Loop.CTES_H_W_T_M_IT_K[22] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[22];
  CTES_Loop.CTES_H_W_T_M_IT_K[23] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[23];
  CTES_Loop.CTES_H_W_T_M_IT_K[24] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[24];
  CTES_Loop.CTES_H_W_T_M_IT_K[25] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[25];
  CTES_Loop.CTES_H_W_T_M_IT_K[26] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[26];
  CTES_Loop.CTES_H_W_T_M_IT_K[27] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[27];
  CTES_Loop.CTES_H_W_T_M_IT_K[28] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[28];
  CTES_Loop.CTES_H_W_T_M_IT_K[29] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[29];
  CTES_Loop.CTES_H_W_T_M_IT_K[30] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[30];
  CTES_Loop.CTES_H_W_T_M_IT_K[31] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[31];
  CTES_Loop.CTES_H_W_T_M_IT_K[32] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[32];
  CTES_Loop.CTES_H_W_T_M_IT_K[33] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[33];
  CTES_Loop.CTES_H_W_T_M_IT_K[34] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[34];
  CTES_Loop.CTES_H_W_T_M_IT_K[35] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[35];
  CTES_Loop.CTES_H_W_T_M_IT_K[36] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[36];
  CTES_Loop.CTES_H_W_T_M_IT_K[37] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[37];
  CTES_Loop.CTES_H_W_T_M_IT_K[38] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[38];
  CTES_Loop.CTES_H_W_T_M_IT_K[39] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[39];
  CTES_Loop.CTES_H_W_T_M_IT_K[40] = 273.15 + CTES_Loop.CTES_H_W_T_M_IT[40];
  CTES_Loop.T_ini_K[1] = 273.15 + CTES_Loop.T_ini[1];
  CTES_Loop.T_ini_K[2] = 273.15 + CTES_Loop.T_ini[2];
  CTES_Loop.T_ini_K[3] = 273.15 + CTES_Loop.T_ini[3];
  CTES_Loop.T_ini_K[4] = 273.15 + CTES_Loop.T_ini[4];
  CTES_Loop.T_ini_K[5] = 273.15 + CTES_Loop.T_ini[5];
  CTES_Loop.T_ini_K[6] = 273.15 + CTES_Loop.T_ini[6];
  CTES_Loop.T_ini_K[7] = 273.15 + CTES_Loop.T_ini[7];
  CTES_Loop.T_ini_K[8] = 273.15 + CTES_Loop.T_ini[8];
  CTES_Loop.T_ini_K[9] = 273.15 + CTES_Loop.T_ini[9];
  CTES_Loop.T_ini_K[10] = 273.15 + CTES_Loop.T_ini[10];
  CTES_Loop.T_ini_K[11] = 273.15 + CTES_Loop.T_ini[11];
  CTES_Loop.T_ini_K[12] = 273.15 + CTES_Loop.T_ini[12];
  CTES_Loop.T_ini_K[13] = 273.15 + CTES_Loop.T_ini[13];
  CTES_Loop.T_ini_K[14] = 273.15 + CTES_Loop.T_ini[14];
  CTES_Loop.T_ini_K[15] = 273.15 + CTES_Loop.T_ini[15];
  CTES_Loop.T_ini_K[16] = 273.15 + CTES_Loop.T_ini[16];
  CTES_Loop.T_ini_K[17] = 273.15 + CTES_Loop.T_ini[17];
  CTES_Loop.T_ini_K[18] = 273.15 + CTES_Loop.T_ini[18];
  CTES_Loop.T_ini_K[19] = 273.15 + CTES_Loop.T_ini[19];
  CTES_Loop.T_ini_K[20] = 273.15 + CTES_Loop.T_ini[20];
  CTES_Loop.T_ini_K[21] = 273.15 + CTES_Loop.T_ini[21];
  CTES_Loop.T_ini_K[22] = 273.15 + CTES_Loop.T_ini[22];
  CTES_Loop.T_ini_K[23] = 273.15 + CTES_Loop.T_ini[23];
  CTES_Loop.T_ini_K[24] = 273.15 + CTES_Loop.T_ini[24];
  CTES_Loop.T_ini_K[25] = 273.15 + CTES_Loop.T_ini[25];
  CTES_Loop.T_ini_K[26] = 273.15 + CTES_Loop.T_ini[26];
  CTES_Loop.T_ini_K[27] = 273.15 + CTES_Loop.T_ini[27];
  CTES_Loop.T_ini_K[28] = 273.15 + CTES_Loop.T_ini[28];
  CTES_Loop.T_ini_K[29] = 273.15 + CTES_Loop.T_ini[29];
  CTES_Loop.T_ini_K[30] = 273.15 + CTES_Loop.T_ini[30];
  CTES_Loop.T_ini_K[31] = 273.15 + CTES_Loop.T_ini[31];
  CTES_Loop.T_ini_K[32] = 273.15 + CTES_Loop.T_ini[32];
  CTES_Loop.T_ini_K[33] = 273.15 + CTES_Loop.T_ini[33];
  CTES_Loop.T_ini_K[34] = 273.15 + CTES_Loop.T_ini[34];
  CTES_Loop.T_ini_K[35] = 273.15 + CTES_Loop.T_ini[35];
  CTES_Loop.T_ini_K[36] = 273.15 + CTES_Loop.T_ini[36];
  CTES_Loop.T_ini_K[37] = 273.15 + CTES_Loop.T_ini[37];
  CTES_Loop.T_ini_K[38] = 273.15 + CTES_Loop.T_ini[38];
  CTES_Loop.T_ini_K[39] = 273.15 + CTES_Loop.T_ini[39];
  CTES_Loop.T_ini_K[40] = 273.15 + CTES_Loop.T_ini[40];
  CTES_Loop.zi = CTES_Loop.h / /*Real*/(CTES_Loop.n);
  CTES_Loop.mi = 3123.693429445962 * (0.5 * CTES_Loop.D) ^ 2.0 * CTES_Loop.zi;
  CTES_Loop.di = CTES_Loop.D + -2.0 * CTES_Loop.t;
  CTES_Loop.Aamb = 3.14159265358979 * CTES_Loop.D * CTES_Loop.zi;
  CTES_Loop.Alayer = 0.7853981633974475 * CTES_Loop.di ^ 2.0;
  CTES_Loop.m_dot[1] = 0.0 "Effective mass flow in the bottom most layer is 0";
  CTES_Loop.m_dot[40] = 0.0 "Effective mass flow in the top most layer is 0";
  CTES_Loop.m_dot[2] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[3] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[4] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[5] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[6] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[7] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[8] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[9] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[10] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[11] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[12] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[13] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[14] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[15] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[16] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[17] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[18] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[19] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[20] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[21] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[22] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[23] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[24] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[25] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[26] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[27] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[28] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[29] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[30] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[31] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[32] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[33] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[34] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[35] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[36] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[37] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[38] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  CTES_Loop.m_dot[39] = CTES_Loop.m_dot_AdCM + CTES_Loop.m_dot_RevHP - CTES_Loop.m_dot_LOAD;
  if CTES_Loop.m_dot[39] > 0.0 then
    CTES_Loop.d_pos = 1.0;
    CTES_Loop.d_neg = 0.0;
  else
    CTES_Loop.d_pos = 0.0;
    CTES_Loop.d_neg = 1.0;
  end if;
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[1]) = 4.18 * (CTES_Loop.m_dot_AdCM * (CTES_Loop.T_CTES_AdCM_In_K - CTES_Loop.CTES_H_W_T_M_IT_K[1]) + CTES_Loop.m_dot_RevHP * (CTES_Loop.T_CTES_RevHP_In_K - CTES_Loop.CTES_H_W_T_M_IT_K[1])) + CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[2] - CTES_Loop.CTES_H_W_T_M_IT_K[1]) / CTES_Loop.zi + 4.18 * CTES_Loop.d_neg * CTES_Loop.m_dot[2] * (CTES_Loop.CTES_H_W_T_M_IT_K[1] - CTES_Loop.CTES_H_W_T_M_IT_K[2]) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[1] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[2]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[1] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[2] + CTES_Loop.CTES_H_W_T_M_IT_K[3]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[2] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[2] - CTES_Loop.CTES_H_W_T_M_IT_K[3]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[1] - CTES_Loop.CTES_H_W_T_M_IT_K[2])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[2] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[3]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[2] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[3] + CTES_Loop.CTES_H_W_T_M_IT_K[4]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[3] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[3] - CTES_Loop.CTES_H_W_T_M_IT_K[4]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[2] - CTES_Loop.CTES_H_W_T_M_IT_K[3])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[3] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[4]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[3] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[4] + CTES_Loop.CTES_H_W_T_M_IT_K[5]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[4] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[4] - CTES_Loop.CTES_H_W_T_M_IT_K[5]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[3] - CTES_Loop.CTES_H_W_T_M_IT_K[4])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[4] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[5]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[4] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[5] + CTES_Loop.CTES_H_W_T_M_IT_K[6]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[5] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[5] - CTES_Loop.CTES_H_W_T_M_IT_K[6]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[4] - CTES_Loop.CTES_H_W_T_M_IT_K[5])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[5] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[6]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[5] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[6] + CTES_Loop.CTES_H_W_T_M_IT_K[7]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[6] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[6] - CTES_Loop.CTES_H_W_T_M_IT_K[7]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[5] - CTES_Loop.CTES_H_W_T_M_IT_K[6])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[6] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[7]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[6] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[7] + CTES_Loop.CTES_H_W_T_M_IT_K[8]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[7] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[7] - CTES_Loop.CTES_H_W_T_M_IT_K[8]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[6] - CTES_Loop.CTES_H_W_T_M_IT_K[7])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[7] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[8]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[7] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[8] + CTES_Loop.CTES_H_W_T_M_IT_K[9]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[8] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[8] - CTES_Loop.CTES_H_W_T_M_IT_K[9]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[7] - CTES_Loop.CTES_H_W_T_M_IT_K[8])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[8] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[9]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[8] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[9] + CTES_Loop.CTES_H_W_T_M_IT_K[10]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[9] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[9] - CTES_Loop.CTES_H_W_T_M_IT_K[10]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[8] - CTES_Loop.CTES_H_W_T_M_IT_K[9])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[9] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[10]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[9] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[10] + CTES_Loop.CTES_H_W_T_M_IT_K[11]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[10] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[10] - CTES_Loop.CTES_H_W_T_M_IT_K[11]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[9] - CTES_Loop.CTES_H_W_T_M_IT_K[10])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[10] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[11]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[10] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[11] + CTES_Loop.CTES_H_W_T_M_IT_K[12]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[11] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[11] - CTES_Loop.CTES_H_W_T_M_IT_K[12]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[10] - CTES_Loop.CTES_H_W_T_M_IT_K[11])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[11] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[12]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[11] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[12] + CTES_Loop.CTES_H_W_T_M_IT_K[13]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[12] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[12] - CTES_Loop.CTES_H_W_T_M_IT_K[13]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[11] - CTES_Loop.CTES_H_W_T_M_IT_K[12])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[12] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[13]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[12] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[13] + CTES_Loop.CTES_H_W_T_M_IT_K[14]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[13] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[13] - CTES_Loop.CTES_H_W_T_M_IT_K[14]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[12] - CTES_Loop.CTES_H_W_T_M_IT_K[13])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[13] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[14]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[13] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[14] + CTES_Loop.CTES_H_W_T_M_IT_K[15]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[14] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[14] - CTES_Loop.CTES_H_W_T_M_IT_K[15]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[13] - CTES_Loop.CTES_H_W_T_M_IT_K[14])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[14] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[15]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[14] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[15] + CTES_Loop.CTES_H_W_T_M_IT_K[16]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[15] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[15] - CTES_Loop.CTES_H_W_T_M_IT_K[16]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[14] - CTES_Loop.CTES_H_W_T_M_IT_K[15])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[15] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[16]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[15] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[16] + CTES_Loop.CTES_H_W_T_M_IT_K[17]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[16] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[16] - CTES_Loop.CTES_H_W_T_M_IT_K[17]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[15] - CTES_Loop.CTES_H_W_T_M_IT_K[16])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[16] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[17]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[16] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[17] + CTES_Loop.CTES_H_W_T_M_IT_K[18]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[17] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[17] - CTES_Loop.CTES_H_W_T_M_IT_K[18]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[16] - CTES_Loop.CTES_H_W_T_M_IT_K[17])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[17] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[18]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[17] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[18] + CTES_Loop.CTES_H_W_T_M_IT_K[19]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[18] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[18] - CTES_Loop.CTES_H_W_T_M_IT_K[19]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[17] - CTES_Loop.CTES_H_W_T_M_IT_K[18])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[18] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[19]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[18] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[19] + CTES_Loop.CTES_H_W_T_M_IT_K[20]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[19] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[19] - CTES_Loop.CTES_H_W_T_M_IT_K[20]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[18] - CTES_Loop.CTES_H_W_T_M_IT_K[19])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[19] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[20]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[19] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[20] + CTES_Loop.CTES_H_W_T_M_IT_K[21]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[20] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[20] - CTES_Loop.CTES_H_W_T_M_IT_K[21]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[19] - CTES_Loop.CTES_H_W_T_M_IT_K[20])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[20] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[21]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[20] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[21] + CTES_Loop.CTES_H_W_T_M_IT_K[22]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[21] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[21] - CTES_Loop.CTES_H_W_T_M_IT_K[22]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[20] - CTES_Loop.CTES_H_W_T_M_IT_K[21])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[21] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[22]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[21] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[22] + CTES_Loop.CTES_H_W_T_M_IT_K[23]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[22] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[22] - CTES_Loop.CTES_H_W_T_M_IT_K[23]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[21] - CTES_Loop.CTES_H_W_T_M_IT_K[22])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[22] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[23]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[22] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[23] + CTES_Loop.CTES_H_W_T_M_IT_K[24]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[23] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[23] - CTES_Loop.CTES_H_W_T_M_IT_K[24]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[22] - CTES_Loop.CTES_H_W_T_M_IT_K[23])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[23] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[24]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[23] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[24] + CTES_Loop.CTES_H_W_T_M_IT_K[25]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[24] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[24] - CTES_Loop.CTES_H_W_T_M_IT_K[25]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[23] - CTES_Loop.CTES_H_W_T_M_IT_K[24])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[24] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[25]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[24] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[25] + CTES_Loop.CTES_H_W_T_M_IT_K[26]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[25] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[25] - CTES_Loop.CTES_H_W_T_M_IT_K[26]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[24] - CTES_Loop.CTES_H_W_T_M_IT_K[25])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[25] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[26]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[25] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[26] + CTES_Loop.CTES_H_W_T_M_IT_K[27]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[26] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[26] - CTES_Loop.CTES_H_W_T_M_IT_K[27]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[25] - CTES_Loop.CTES_H_W_T_M_IT_K[26])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[26] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[27]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[26] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[27] + CTES_Loop.CTES_H_W_T_M_IT_K[28]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[27] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[27] - CTES_Loop.CTES_H_W_T_M_IT_K[28]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[26] - CTES_Loop.CTES_H_W_T_M_IT_K[27])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[27] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[28]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[27] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[28] + CTES_Loop.CTES_H_W_T_M_IT_K[29]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[28] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[28] - CTES_Loop.CTES_H_W_T_M_IT_K[29]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[27] - CTES_Loop.CTES_H_W_T_M_IT_K[28])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[28] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[29]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[28] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[29] + CTES_Loop.CTES_H_W_T_M_IT_K[30]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[29] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[29] - CTES_Loop.CTES_H_W_T_M_IT_K[30]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[28] - CTES_Loop.CTES_H_W_T_M_IT_K[29])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[29] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[30]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[29] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[30] + CTES_Loop.CTES_H_W_T_M_IT_K[31]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[30] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[30] - CTES_Loop.CTES_H_W_T_M_IT_K[31]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[29] - CTES_Loop.CTES_H_W_T_M_IT_K[30])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[30] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[31]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[30] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[31] + CTES_Loop.CTES_H_W_T_M_IT_K[32]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[31] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[31] - CTES_Loop.CTES_H_W_T_M_IT_K[32]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[30] - CTES_Loop.CTES_H_W_T_M_IT_K[31])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[31] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[32]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[31] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[32] + CTES_Loop.CTES_H_W_T_M_IT_K[33]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[32] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[32] - CTES_Loop.CTES_H_W_T_M_IT_K[33]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[31] - CTES_Loop.CTES_H_W_T_M_IT_K[32])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[32] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[33]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[32] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[33] + CTES_Loop.CTES_H_W_T_M_IT_K[34]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[33] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[33] - CTES_Loop.CTES_H_W_T_M_IT_K[34]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[32] - CTES_Loop.CTES_H_W_T_M_IT_K[33])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[33] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[34]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[33] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[34] + CTES_Loop.CTES_H_W_T_M_IT_K[35]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[34] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[34] - CTES_Loop.CTES_H_W_T_M_IT_K[35]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[33] - CTES_Loop.CTES_H_W_T_M_IT_K[34])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[34] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[35]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[34] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[35] + CTES_Loop.CTES_H_W_T_M_IT_K[36]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[35] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[35] - CTES_Loop.CTES_H_W_T_M_IT_K[36]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[34] - CTES_Loop.CTES_H_W_T_M_IT_K[35])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[35] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[36]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[35] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[36] + CTES_Loop.CTES_H_W_T_M_IT_K[37]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[36] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[36] - CTES_Loop.CTES_H_W_T_M_IT_K[37]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[35] - CTES_Loop.CTES_H_W_T_M_IT_K[36])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[36] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[37]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[36] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[37] + CTES_Loop.CTES_H_W_T_M_IT_K[38]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[37] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[37] - CTES_Loop.CTES_H_W_T_M_IT_K[38]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[36] - CTES_Loop.CTES_H_W_T_M_IT_K[37])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[37] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[38]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[37] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[38] + CTES_Loop.CTES_H_W_T_M_IT_K[39]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[38] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[38] - CTES_Loop.CTES_H_W_T_M_IT_K[39]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[37] - CTES_Loop.CTES_H_W_T_M_IT_K[38])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[38] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[39]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[38] + -2.0 * CTES_Loop.CTES_H_W_T_M_IT_K[39] + CTES_Loop.CTES_H_W_T_M_IT_K[40]) / CTES_Loop.zi + 4.18 * CTES_Loop.m_dot[39] * (CTES_Loop.d_neg * (CTES_Loop.CTES_H_W_T_M_IT_K[39] - CTES_Loop.CTES_H_W_T_M_IT_K[40]) + CTES_Loop.d_pos * (CTES_Loop.CTES_H_W_T_M_IT_K[38] - CTES_Loop.CTES_H_W_T_M_IT_K[39])) - CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[39] - CTES_Loop.T_amb_K);
  4.18 * CTES_Loop.mi * der(CTES_Loop.CTES_H_W_T_M_IT_K[40]) = CTES_Loop.Alayer * CTES_Loop.lambda_eff * (CTES_Loop.CTES_H_W_T_M_IT_K[39] - CTES_Loop.CTES_H_W_T_M_IT_K[40]) / CTES_Loop.zi + 4.18 * (CTES_Loop.m_dot_LOAD * (CTES_Loop.T_CTES_LOAD_RL_K - CTES_Loop.CTES_H_W_T_M_IT_K[40]) + CTES_Loop.d_pos * CTES_Loop.m_dot[39] * (CTES_Loop.CTES_H_W_T_M_IT_K[39] - CTES_Loop.CTES_H_W_T_M_IT_K[40])) + -20.0 * CTES_Loop.Aamb * CTES_Loop.kappa * (CTES_Loop.CTES_H_W_T_M_IT_K[40] - CTES_Loop.T_amb_K);
  HTES_Loop.v_HT = RevHP_HP.V_HT;
  HTES_Loop.HTES_HX_Out.T = HX_3_Small.HX_OC_in.T;
  HTES_Loop.HTES_HX_Out.m_dot = HX_3_Small.HX_OC_in.m_dot;
  HTES_Loop.HTES_HX_In.T = HX_3_Small.HX_OC_Out.T;
  HX_3_Small.HX_AdCM_Out.T = RevHP_HP.RevHP_HX_HT_In.T;
  HX_3_Small.HX_AdCM_in.T = RevHP_HP.RevHP_HX_HT_Out.T;
  HX_3_Small.HX_AdCM_in.m_dot = RevHP_HP.RevHP_HX_HT_Out.m_dot;
  HTES_Loop.Coil_ON = Switch.Coil_Switch;
  Ambient.Amb_Temp.T = CTES_Loop.T_amb.T;
  Ambient.Amb_Temp.T = HTES_Loop.T_amb.T;
  Ambient.Amb_Temp.T = OC_1.T_amb.T;
  Ambient.Amb_Temp.T = OC_2.T_amb.T;
  Ambient.Amb_Temp.T = OC_3_RevHP.T_amb.T;
  RevHP_CC.RevHP_CC_ON = Switch.RevHP_CC_Switch;
  CHP.CHP_ON = Switch.CHP_Switch;
  AdCM.AdCM_ON = Switch.AdCM_Switch;
  RevHP_HP.RevHP_HP_ON = Switch.RevHP_HP_Switch;
  CHP.DobleTempIn.T1 = HTES_Loop.DobleTempOut.T1;
  CHP.DobleTempIn.T1 = RevHP_HP.DobleTempIn.T1;
  CHP.DobleTempIn.T2 = HTES_Loop.DobleTempOut.T2;
  CHP.DobleTempIn.T2 = RevHP_HP.DobleTempIn.T2;
  AdCM.DobleT_In_CTES.T1 = CTES_Loop.DobleTempOut.T1;
  AdCM.DobleT_In_CTES.T1 = RevHP_CC.DoubleTempIn.T1;
  AdCM.DobleT_In_CTES.T2 = CTES_Loop.DobleTempOut.T2;
  AdCM.DobleT_In_CTES.T2 = RevHP_CC.DoubleTempIn.T2;
  HX_2_Big.HX_AdCM_in.T = OC_2.OC_HX_Out.T;
  HX_2_Big.HX_AdCM_in.m_dot = OC_2.OC_HX_Out.m_dot;
  HX_2_Big.HX_AdCM_Out.T = OC_2.OC_HX_in.T;
  HX_2_Big.HX_OC_in.T = RevHP_HP.RevHP_HX_MT_Out.T;
  HX_2_Big.HX_OC_in.m_dot = RevHP_HP.RevHP_HX_MT_Out.m_dot;
  HX_2_Big.HX_OC_Out.T = RevHP_HP.RevHP_HX_MT_In.T;
  HX_1_Big.HX_OC_Out.T = OC_1.OC_HX_in.T;
  HX_1_Big.HX_OC_in.T = OC_1.OC_HX_Out.T;
  HX_1_Big.HX_OC_in.m_dot = OC_1.OC_HX_Out.m_dot;
  OC_3_RevHP.OC_RevHP_Out.T = RevHP_CC.RevHP_OC_In.T;
  OC_3_RevHP.OC_RevHP_In.T = RevHP_CC.RevHP_OC_Out.T;
  OC_3_RevHP.OC_RevHP_In.m_dot = RevHP_CC.RevHP_OC_Out.m_dot;
  CTES_Loop.CTES_RevHP_Out.T = RevHP_CC.RevHP_CTES_In.T;
  CTES_Loop.CTES_RevHP_In.T = RevHP_CC.RevHP_CTES_Out.T;
  CTES_Loop.CTES_RevHP_In.m_dot = RevHP_CC.RevHP_CTES_Out.m_dot;
  CTES_Loop.CTES_LOAD_In.T = Load_C.LOAD_Out.T;
  CTES_Loop.CTES_LOAD_In.m_dot = Load_C.LOAD_Out.m_dot;
  CTES_Loop.CTES_LOAD_Out.T = Load_C.LOAD_In.T;
  AdCM.AdCM_HX_In.T = HX_1_Big.HX_AdCM_Out.T;
  AdCM.AdCM_HX_Out.T = HX_1_Big.HX_AdCM_in.T;
  AdCM.AdCM_HX_Out.m_dot = HX_1_Big.HX_AdCM_in.m_dot;
  AdCM.AdCM_CTES_Out.T = CTES_Loop.CTES_AdCM_In.T;
  AdCM.AdCM_CTES_Out.m_dot = CTES_Loop.CTES_AdCM_In.m_dot;
  AdCM.AdCM_CTES_In.T = CTES_Loop.CTES_AdCM_Out.T;
  AdCM.AdCM_HTES_Out.T = HTES_Loop.HTES_AdCM_In.T;
  AdCM.AdCM_HTES_Out.m_dot = HTES_Loop.HTES_AdCM_In.m_dot;
  AdCM.AdCM_HTES_In.T = HTES_Loop.HTES_AdCM_Out.T;
  HTES_Loop.HTES_LOAD_Out.T = Load.LOAD_In.T;
  HTES_Loop.HTES_LOAD_In.T = Load.LOAD_Out.T;
  HTES_Loop.HTES_LOAD_In.m_dot = Load.LOAD_Out.m_dot;
  CHP.CHP_HTES_In.T = HTES_Loop.HTES_CHP_Out.T;
  CHP.CHP_HTES_Out.T = HTES_Loop.HTES_CHP_In.T;
  CHP.CHP_HTES_Out.m_dot = HTES_Loop.HTES_CHP_In.m_dot;
algorithm
  when CHP.Temp_Low <= CHP.Lower_Temp_Limit then
    CHP.heat := true;
  end when;
  when CHP.Temp_High >= CHP.Higher_Temp_Limit then
    CHP.heat := false;
  end when;
algorithm
  when AdCM.Temp_Low <= AdCM.Lower_Temp_Limit then
    AdCM.cool := false;
  end when;
  when AdCM.Temp_High >= AdCM.Higher_Temp_Limit then
    AdCM.cool := true;
  end when;
algorithm
  when RevHP_HP.Temp_Low <= RevHP_HP.Lower_Temp_Limit then
    RevHP_HP.heat := true;
  end when;
  when RevHP_HP.Temp_High >= RevHP_HP.Higher_Temp_Limit then
    RevHP_HP.heat := false;
  end when;
algorithm
  when RevHP_CC.Temp_High >= RevHP_CC.Higher_Temp_Limit then
    RevHP_CC.cool := true;
  end when;
  when RevHP_CC.Temp_Low <= RevHP_CC.Lower_Temp_Limit then
    RevHP_CC.cool := false;
  end when;
algorithm
  when HTES_Loop.HTES_H_W_T_M_IT[30] <= 75.0 then
    HTES_Loop.heat := true;
  end when;
  when HTES_Loop.HTES_H_W_T_M_IT[30] >= 80.0 then
    HTES_Loop.heat := false;
  end when;
end KWKK_CCHP_V49.SimModels.KWKK_LOOP;

